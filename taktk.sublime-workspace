{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"it",
				"iterable"
			],
			[
				"contet",
				"contents"
			],
			[
				"Na",
				"Namespace()"
			],
			[
				"re",
				"redirect"
			],
			[
				"noti",
				"notification"
			],
			[
				"ren",
				"render()"
			],
			[
				"pa",
				"parent"
			],
			[
				"sub",
				"subscribe_to()"
			],
			[
				"parse_",
				"parse_next_special"
			],
			[
				"lay",
				"layout_class"
			],
			[
				"is",
				"isinstance"
			],
			[
				"def",
				"default"
			],
			[
				"cre",
				"created"
			],
			[
				"rende",
				"renderred"
			],
			[
				"subs",
				"Subscriber"
			],
			[
				"bui",
				"builtins"
			],
			[
				"tk",
				"tkMenu"
			],
			[
				"__",
				"__init__()"
			],
			[
				"dic",
				"dictionary"
			],
			[
				"_co",
				"_collect_values"
			],
			[
				"_c",
				"_component_"
			],
			[
				"Sub",
				"Subscriber"
			],
			[
				"att",
				"attrs"
			],
			[
				"_sub",
				"_subscribeable"
			],
			[
				"_subs",
				"_subscriber"
			],
			[
				"_s",
				"_subscribeable"
			],
			[
				"w",
				"writeable"
			],
			[
				"At",
				"AttributeError"
			],
			[
				"Att",
				"Attrs"
			],
			[
				"Attr",
				"AttributeManager"
			],
			[
				"su",
				"subscriber"
			],
			[
				"Su",
				"Subscriber"
			],
			[
				"_subsc",
				"_subscribers"
			],
			[
				"a",
				"auto"
			],
			[
				"Subs",
				"Subscriber"
			],
			[
				"subsc",
				"subscriber"
			],
			[
				"Im",
				"ImportError"
			],
			[
				"glTr",
				"glTranslate"
			],
			[
				"ii",
				"init_gl"
			],
			[
				"dr",
				"draw_scene"
			],
			[
				"lex",
				"lexer"
			],
			[
				"p",
				"tip"
			],
			[
				"3",
				"35em"
			],
			[
				"gi",
				"i-github\tSVG Icon GitHub"
			],
			[
				"extr",
				"extra_header_link_icons="
			],
			[
				"lo",
				"logo_light="
			],
			[
				"sp",
				"sphinx_rtd_theme"
			],
			[
				"meta",
				"meta_content_scope"
			],
			[
				"illegal-",
				"illegal-assignment"
			],
			[
				"se",
				"separator."
			],
			[
				"Nam",
				"NameError"
			],
			[
				"var",
				"varname"
			],
			[
				"col",
				"columnconfigure"
			],
			[
				"un",
				"unsubscribe_from_all"
			],
			[
				"subscr",
				"subscribeable"
			],
			[
				"subc",
				"subscribe"
			],
			[
				"nam",
				"namespace"
			],
			[
				"ca",
				"call_gets"
			],
			[
				"cal",
				"call_sets"
			],
			[
				"ev",
				"eval_gets"
			],
			[
				"set",
				"set_response"
			],
			[
				"get",
				"getter_caller"
			],
			[
				"Wr",
				"Writeable"
			],
			[
				"Wri",
				"WritableStringVar"
			],
			[
				"e",
				"evaluate_string"
			],
			[
				"Ex",
				"Expression"
			],
			[
				"cl",
				"classmethod"
			],
			[
				"c",
				"classmethod"
			],
			[
				"com",
				"component"
			],
			[
				"ch",
				"children"
			],
			[
				"na",
				"namespace"
			],
			[
				"ty",
				"type"
			],
			[
				"in",
				"instructions"
			],
			[
				"las",
				"last_tag"
			],
			[
				"chi",
				"child"
			],
			[
				"la",
				"last_indent"
			],
			[
				"pr",
				"print()"
			],
			[
				"chil",
				"children"
			],
			[
				"ind",
				"indent"
			],
			[
				"par",
				"parent"
			],
			[
				"parse_next",
				"parse_next_instruction"
			],
			[
				"__get",
				"__getitem__"
			],
			[
				"parse",
				"parse_next_instruction"
			],
			[
				"ta",
				"taktk-args"
			],
			[
				"bra",
				"brackets."
			],
			[
				"co",
				"continuation."
			],
			[
				"attr",
				"attributes"
			],
			[
				"tra",
				"transparent"
			],
			[
				"conte",
				"contextmanager"
			],
			[
				"o",
				"other."
			],
			[
				"de",
				"default"
			],
			[
				"l",
				"language"
			],
			[
				"layou",
				"layout_parent"
			],
			[
				"cont",
				"container"
			],
			[
				"im",
				"import"
			],
			[
				"curr",
				"current_page"
			],
			[
				"Mod",
				"ModuleType"
			],
			[
				"an",
				"annotate"
			],
			[
				"fall",
				"fallback_language"
			],
			[
				"wind",
				"window_class"
			],
			[
				"medi",
				"media_path"
			],
			[
				"fal",
				"fallback_language"
			],
			[
				"_creat",
				"_create_params"
			],
			[
				"N",
				"Newlines"
			],
			[
				"res",
				"response_text"
			],
			[
				"winfo_",
				"winfo_rooty()"
			],
			[
				"posit",
				"position_widgets()"
			],
			[
				"app",
				"application"
			],
			[
				"vi",
				"view"
			],
			[
				"ur",
				"urllib."
			],
			[
				"cu",
				"current_url"
			],
			[
				"R",
				"RequestHandler"
			],
			[
				"Us",
				"Users"
			],
			[
				"appl",
				"application_server"
			],
			[
				"con",
				"converter()"
			],
			[
				"reg",
				"registerrer"
			],
			[
				"them",
				"theme_use()"
			],
			[
				"up",
				"update_entry"
			],
			[
				"for",
				"for_page()"
			],
			[
				"mo",
				"module"
			],
			[
				"r",
				"read()"
			],
			[
				"pag",
				"page_stores"
			],
			[
				"bas",
				"basicConfig"
			],
			[
				"url",
				"urlparse"
			],
			[
				"E",
				"Expression"
			],
			[
				"D",
				"Dictionary"
			],
			[
				"spl",
				"splitlines"
			],
			[
				"compo",
				"component_space"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/taktk/template.py",
			"settings":
			{
				"buffer_size": 19871,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					397,
					1,
					"left_delete",
					null,
					"AQAAABBEAAAAAAAAEEQAAAAAAAACAAAASWY",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAASRAAAAAAAABBEAAAAAAAAAAAAAAAA8L8"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": "Enum"
					},
					"BAAAABBEAAAAAAAAEUQAAAAAAAAAAAAAEUQAAAAAAAASRAAAAAAAAAAAAAASRAAAAAAAABNEAAAAAAAAAAAAABNEAAAAAAAAFEQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQRAAAAAAAABBEAAAAAAAAAAAAAAAA8L8"
				],
				[
					401,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAURAAAAAAAABREAAAAAAAAAAAAAAAA8L8"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAENEAAAAAAAAREQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDRAAAAAAAAENEAAAAAAAAAAAAAAAA8L8"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": " self."
					},
					"BgAAAEREAAAAAAAARUQAAAAAAAAAAAAARUQAAAAAAABGRAAAAAAAAAAAAABGRAAAAAAAAEdEAAAAAAAAAAAAAEdEAAAAAAAASEQAAAAAAAAAAAAASEQAAAAAAABJRAAAAAAAAAAAAABJRAAAAAAAAEpEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABERAAAAAAAAEREAAAAAAAAAAAAAAAA8L8"
				],
				[
					407,
					1,
					"insert",
					{
						"characters": "at"
					},
					"AgAAAEpEAAAAAAAAS0QAAAAAAAAAAAAAS0QAAAAAAABMRAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKRAAAAAAAAEpEAAAAAAAAAAAAAAAA8L8"
				],
				[
					408,
					1,
					"left_delete",
					null,
					"AQAAAEtEAAAAAAAAS0QAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABMRAAAAAAAAExEAAAAAAAAAAAAAAAA8L8"
				],
				[
					409,
					1,
					"insert",
					{
						"characters": "rgs"
					},
					"AwAAAEtEAAAAAAAATEQAAAAAAAAAAAAATEQAAAAAAABNRAAAAAAAAAAAAABNRAAAAAAAAE5EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLRAAAAAAAAEtEAAAAAAAAAAAAAAAA8L8"
				],
				[
					410,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAE5EAAAAAAAAUEQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABORAAAAAAAAE5EAAAAAAAAAAAAAAAA8L8"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAE9EAAAAAAAAUEQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPRAAAAAAAAE9EAAAAAAAAAAAAAAAA8L8"
				],
				[
					414,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQRAAAAAAAAFBEAAAAAAAAAAAAAAAA8L8"
				],
				[
					432,
					1,
					"left_delete",
					null,
					"AQAAAM8iAAAAAAAAzyIAAAAAAAAEAAAAc2VsZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPIgAAAAAAANMiAAAAAAAAAAAAAAAA8L8"
				],
				[
					433,
					1,
					"insert",
					{
						"characters": "..."
					},
					"AwAAAM8iAAAAAAAA0CIAAAAAAAAAAAAA0CIAAAAAAADRIgAAAAAAAAAAAADRIgAAAAAAANIiAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPIgAAAAAAAM8iAAAAAAAAAAAAAAAA8L8"
				],
				[
					436,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSIgAAAAAAANIiAAAAAAAAAAAAAAAA8L8"
				],
				[
					440,
					1,
					"cut",
					null,
					"AQAAADYhAAAAAAAANiEAAAAAAAAJAAAAc2VsZiArPSAx",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/IQAAAAAAADYhAAAAAAAAAAAAAAAA8L8"
				],
				[
					442,
					1,
					"left_delete",
					null,
					"AQAAACYhAAAAAAAAJiEAAAAAAAARAAAAICAgICAgICAgICAgICAgIAo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmIQAAAAAAADchAAAAAAAAAAAAAAAA8L8"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMYiAAAAAAAAxyIAAAAAAAAAAAAAxyIAAAAAAADPIgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGIgAAAAAAAMYiAAAAAAAAAAAAAAAA8L8"
				],
				[
					446,
					1,
					"paste",
					null,
					"AQAAAM8iAAAAAAAA2CIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPIgAAAAAAAM8iAAAAAAAAAAAAAAAA8L8"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": "  #"
					},
					"AwAAANgiAAAAAAAA2SIAAAAAAAAAAAAA2SIAAAAAAADaIgAAAAAAAAAAAADaIgAAAAAAANsiAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYIgAAAAAAANgiAAAAAAAAAAAAAAAA8L8"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": " skip"
					},
					"BQAAANsiAAAAAAAA3CIAAAAAAAAAAAAA3CIAAAAAAADdIgAAAAAAAAAAAADdIgAAAAAAAN4iAAAAAAAAAAAAAN4iAAAAAAAA3yIAAAAAAAAAAAAA3yIAAAAAAADgIgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbIgAAAAAAANsiAAAAAAAAAAAAAAAA8L8"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": " ending"
					},
					"BwAAAOAiAAAAAAAA4SIAAAAAAAAAAAAA4SIAAAAAAADiIgAAAAAAAAAAAADiIgAAAAAAAOMiAAAAAAAAAAAAAOMiAAAAAAAA5CIAAAAAAAAAAAAA5CIAAAAAAADlIgAAAAAAAAAAAADlIgAAAAAAAOYiAAAAAAAAAAAAAOYiAAAAAAAA5yIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgIgAAAAAAAOAiAAAAAAAAAAAAAAAA8L8"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": " bracket"
					},
					"CAAAAOciAAAAAAAA6CIAAAAAAAAAAAAA6CIAAAAAAADpIgAAAAAAAAAAAADpIgAAAAAAAOoiAAAAAAAAAAAAAOoiAAAAAAAA6yIAAAAAAAAAAAAA6yIAAAAAAADsIgAAAAAAAAAAAADsIgAAAAAAAO0iAAAAAAAAAAAAAO0iAAAAAAAA7iIAAAAAAAAAAAAA7iIAAAAAAADvIgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnIgAAAAAAAOciAAAAAAAAAAAAAAAA8L8"
				],
				[
					453,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvIgAAAAAAAO8iAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "examples/todoapp/todoapp/pages/__init__.py",
			"settings":
			{
				"buffer_size": 1118,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANECAAAAAAAA0gIAAAAAAAAAAAAA0gIAAAAAAADiAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRAgAAAAAAANECAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					2,
					"left_delete",
					null,
					"AgAAAN4CAAAAAAAA3gIAAAAAAAAEAAAAICAgINoCAAAAAAAA2gIAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiAgAAAAAAAOICAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "!en"
					},
					"AwAAANoCAAAAAAAA2wIAAAAAAAAAAAAA2wIAAAAAAADcAgAAAAAAAAAAAADcAgAAAAAAAN0CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaAgAAAAAAANoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "um"
					},
					"AgAAAN0CAAAAAAAA3gIAAAAAAAAAAAAA3gIAAAAAAADfAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdAgAAAAAAAN0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN8CAAAAAAAA4AIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfAgAAAAAAAN8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOACAAAAAAAA4gIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgAgAAAAAAAOACAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "items:"
					},
					"BgAAAOACAAAAAAAA4QIAAAAAAAAAAAAA4QIAAAAAAADiAgAAAAAAAAAAAADiAgAAAAAAAOMCAAAAAAAAAAAAAOMCAAAAAAAA5AIAAAAAAAAAAAAA5AIAAAAAAADlAgAAAAAAAAAAAADlAgAAAAAAAOYCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgAgAAAAAAAOACAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAOUCAAAAAAAA5QIAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmAgAAAAAAAOYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAOUCAAAAAAAA5gIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlAgAAAAAAAOUCAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "idx,"
					},
					"BAAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA6AIAAAAAAADpAgAAAAAAAAAAAADpAgAAAAAAAOoCAAAAAAAAAAAAAOoCAAAAAAAA6wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnAgAAAAAAAOcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " val"
					},
					"BAAAAOsCAAAAAAAA7AIAAAAAAAAAAAAA7AIAAAAAAADtAgAAAAAAAAAAAADtAgAAAAAAAO4CAAAAAAAAAAAAAO4CAAAAAAAA7wIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrAgAAAAAAAOsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					3,
					"left_delete",
					null,
					"AwAAAO4CAAAAAAAA7gIAAAAAAAABAAAAbO0CAAAAAAAA7QIAAAAAAAABAAAAYewCAAAAAAAA7AIAAAAAAAABAAAAdg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvAgAAAAAAAO8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "val"
					},
					"AwAAAOwCAAAAAAAA7QIAAAAAAAAAAAAA7QIAAAAAAADuAgAAAAAAAAAAAADuAgAAAAAAAO8CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsAgAAAAAAAOwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"reindent",
					null,
					"AQAAAPkCAAAAAAAA/QIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5AgAAAAAAAPkCAAAAAAAAAAAAAACAZkA"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "items"
					},
					"BQAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA/gIAAAAAAAD/AgAAAAAAAAAAAAD/AgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAQMAAAAAAAAAAAAAAQMAAAAAAAACAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AgAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAIDAAAAAAAAAwMAAAAAAAAAAAAAAwMAAAAAAAAEAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACAwAAAAAAAAIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAQDAAAAAAAABQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAwAAAAAAAAQDAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAUDAAAAAAAABwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFAwAAAAAAAAUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAAUDAAAAAAAABQMAAAAAAAABAAAAWwUDAAAAAAAABQMAAAAAAAABAAAAXQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAwAAAAAAAAYDAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "range"
					},
					"BQAAAAUDAAAAAAAABgMAAAAAAAAAAAAABgMAAAAAAAAHAwAAAAAAAAAAAAAHAwAAAAAAAAgDAAAAAAAAAAAAAAgDAAAAAAAACQMAAAAAAAAAAAAACQMAAAAAAAAKAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFAwAAAAAAAAUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAoDAAAAAAAADAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKAwAAAAAAAAoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AQAAAAsDAAAAAAAADAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALAwAAAAAAAAsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAPACAAAAAAAA8QIAAAAAAAAAAAAA8QIAAAAAAAD5AgAAAAAAAAAAAAD5AgAAAAAAAP0CAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwAgAAAAAAAPACAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AgAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAAP0CAAAAAAAA/QIAAAAAAAABAAAAbA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD+AgAAAAAAAP4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "\\label"
					},
					"BgAAAP0CAAAAAAAA/gIAAAAAAAAAAAAA/gIAAAAAAAD/AgAAAAAAAAAAAAD/AgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAQMAAAAAAAAAAAAAAQMAAAAAAAACAwAAAAAAAAAAAAACAwAAAAAAAAMDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AgAAAAAAAP0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " text"
					},
					"BQAAAAMDAAAAAAAABAMAAAAAAAAAAAAABAMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABwMAAAAAAAAAAAAABwMAAAAAAAAIAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADAwAAAAAAAAMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAAgDAAAAAAAACQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAwAAAAAAAAgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					43,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAkDAAAAAAAACwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJAwAAAAAAAAkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "str"
					},
					"AwAAAAoDAAAAAAAACwMAAAAAAAAAAAAACwMAAAAAAAAMAwAAAAAAAAAAAAAMAwAAAAAAAA0DAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKAwAAAAAAAAoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					45,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA0DAAAAAAAADwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANAwAAAAAAAA0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "val"
					},
					"AwAAAA4DAAAAAAAADwMAAAAAAAAAAAAADwMAAAAAAAAQAwAAAAAAAAAAAAAQAwAAAAAAABEDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAwAAAAAAAA4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " pos:pack"
					},
					"CQAAABMDAAAAAAAAFAMAAAAAAAAAAAAAFAMAAAAAAAAVAwAAAAAAAAAAAAAVAwAAAAAAABYDAAAAAAAAAAAAABYDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABkDAAAAAAAAAAAAABkDAAAAAAAAGgMAAAAAAAAAAAAAGgMAAAAAAAAbAwAAAAAAAAAAAAAbAwAAAAAAABwDAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAwAAAAAAABMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA3QQAAAAAAADcBAAAZnJvbSB0YWt0ay5jb21wb25lbnQgaW1wb3J0IENvbXBvbmVudApmcm9tIHRha3RrLm5vdGlmaWNhdGlvbiBpbXBvcnQgTm90aWZpY2F0aW9uCgpmcm9tIHRha3RrLnBhZ2UgaW1wb3J0IHJlZ2lzdGVyX3VybHBhdHRlcm4KCgpmcm9tIC4uYWRtaW4gaW1wb3J0IFVzZXIKCmZyb20gLiBpbXBvcnQgdG9kb3MKCgpjbGFzcyBJbmRleChDb21wb25lbnQpOgogICAgciIiIgogICAgXGZyYW1lIHBhZGRpbmc9MCB3ZWlnaHQ6eD0nMDo1JyB3ZWlnaHQ6eT0nMDo1JwogICAgICAgIFxmcmFtZSBwb3M6Z3JpZD0wLDEgIHBhZGRpbmc9NSBwb3M6c3RpY2t5PScnCiAgICAgICAgICAgIFxzZG93bi52aWV3IHRleHQ9QHBhZ2VzLmluZGV4LndlbGNvbWUgd2lkdGg9MTEwIHNjcm9sbGFibGU9RmFsc2VcCiAgICAgICAgICAgICAgICBwb3M6Z3JpZD0wLDAgcG9zOnN0aWNreT0nbnNldycKICAgICAgICAhaWYgVXNlci5pc19sb2dpbigpCiAgICAgICAgICAgIFxjdGsuYnV0dG9uIHBvczpncmlkPTAsMiB0ZXh0PUBwYWdlcy5pbmRleC5uZXh0IHBvczpzdGlja3k9J3NlJ1wKICAgICAgICAgICAgICAgIGNvbW1hbmQ9e2d0X25leHR9CiAgICAgICAgIWlmIG5vdCBVc2VyLmlzX2xvZ2luKCkKICAgICAgICAgICAgXGN0ay5idXR0b24gcG9zOmdyaWQ9MCwyIHRleHQ9QHBhZ2VzLmluZGV4LmxvZ2luIHBvczpzdGlja3k9J3NlJ1wKICAgICAgICAgICAgICAgIGNvbW1hbmQ9e2d0X2xvZ2lufQogICAgICAgICFlbnVtIGl0ZW1zOihpZHgsIHZhbCkKICAgICAgICAgICAgXGxhYmVsIHRleHQ9e3N0cih2YWwpfSBwb3M6cGFjawogICAgIiIiCiAgICBpdGVtcyA9IHJhbmdlKDUpCiAgICBkZWYgZ3RfbmV4dChzZWxmKToKICAgICAgICBpbXBvcnQgdGFrdGsKCiAgICAgICAgdGFrdGsuYXBwbGljYXRpb24oInRvZG9zIikKCiAgICBkZWYgZ3RfbG9naW4oc2VsZik6CiAgICAgICAgaW1wb3J0IHRha3RrCgogICAgICAgIHRha3RrLmFwcGxpY2F0aW9uKCJzaWduIiwgInNpZ25pbiIsIHJlZGlyZWN0PSJ0b2RvcyIpCgogICAgVXNlciA9IFVzZXIKCgpkZWYgZGVmYXVsdChzdG9yZSwgLywgKipwYXJhbXMpOgogICAgcmV0dXJuIEluZGV4KCkKCgpAcmVnaXN0ZXJfdXJscGF0dGVybigKICAgIHIiW1xkYS1mXXs4fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXsxMn0iLAogICAgcG9zaXRpb249MCwKKQpkZWYgdXNlcih1dWlkKToKICAgIHJldHVybiBVc2VyLmZyb21fdXVpZCh1dWlkKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAwAAAAAAABwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					63,
					1,
					"left_delete",
					null,
					"AQAAAOUAAAAAAAAA5QAAAAAAAAAeAAAAIHdlaWdodDp4PScwOjUnIHdlaWdodDp5PScwOjUn",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlAAAAAAAAAAMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAvwQAAAAAAAC/BAAAZnJvbSB0YWt0ay5jb21wb25lbnQgaW1wb3J0IENvbXBvbmVudApmcm9tIHRha3RrLm5vdGlmaWNhdGlvbiBpbXBvcnQgTm90aWZpY2F0aW9uCgpmcm9tIHRha3RrLnBhZ2UgaW1wb3J0IHJlZ2lzdGVyX3VybHBhdHRlcm4KCgpmcm9tIC4uYWRtaW4gaW1wb3J0IFVzZXIKCmZyb20gLiBpbXBvcnQgdG9kb3MKCgpjbGFzcyBJbmRleChDb21wb25lbnQpOgogICAgciIiIgogICAgXGZyYW1lIHBhZGRpbmc9MAogICAgICAgIFxmcmFtZSBwb3M6Z3JpZD0wLDEgIHBhZGRpbmc9NSBwb3M6c3RpY2t5PScnCiAgICAgICAgICAgIFxzZG93bi52aWV3IHRleHQ9QHBhZ2VzLmluZGV4LndlbGNvbWUgd2lkdGg9MTEwIHNjcm9sbGFibGU9RmFsc2VcCiAgICAgICAgICAgICAgICBwb3M6Z3JpZD0wLDAgcG9zOnN0aWNreT0nbnNldycKICAgICAgICAhaWYgVXNlci5pc19sb2dpbigpCiAgICAgICAgICAgIFxjdGsuYnV0dG9uIHBvczpncmlkPTAsMiB0ZXh0PUBwYWdlcy5pbmRleC5uZXh0IHBvczpzdGlja3k9J3NlJ1wKICAgICAgICAgICAgICAgIGNvbW1hbmQ9e2d0X25leHR9CiAgICAgICAgIWlmIG5vdCBVc2VyLmlzX2xvZ2luKCkKICAgICAgICAgICAgXGN0ay5idXR0b24gcG9zOmdyaWQ9MCwyIHRleHQ9QHBhZ2VzLmluZGV4LmxvZ2luIHBvczpzdGlja3k9J3NlJ1wKICAgICAgICAgICAgICAgIGNvbW1hbmQ9e2d0X2xvZ2lufQogICAgICAgICFlbnVtIGl0ZW1zOihpZHgsIHZhbCkKICAgICAgICAgICAgXGxhYmVsIHRleHQ9e3N0cih2YWwpfSBwb3M6cGFjawogICAgIiIiCiAgICBpdGVtcyA9IHJhbmdlKDUpCgogICAgZGVmIGd0X25leHQoc2VsZik6CiAgICAgICAgaW1wb3J0IHRha3RrCgogICAgICAgIHRha3RrLmFwcGxpY2F0aW9uKCJ0b2RvcyIpCgogICAgZGVmIGd0X2xvZ2luKHNlbGYpOgogICAgICAgIGltcG9ydCB0YWt0awoKICAgICAgICB0YWt0ay5hcHBsaWNhdGlvbigic2lnbiIsICJzaWduaW4iLCByZWRpcmVjdD0idG9kb3MiKQoKICAgIFVzZXIgPSBVc2VyCgoKZGVmIGRlZmF1bHQoc3RvcmUsIC8sICoqcGFyYW1zKToKICAgIHJldHVybiBJbmRleCgpCgoKQHJlZ2lzdGVyX3VybHBhdHRlcm4oCiAgICByIltcZGEtZl17OH1cLVtcZGEtZl17NH1cLVtcZGEtZl17NH1cLVtcZGEtZl17NH1cLVtcZGEtZl17MTJ9IiwKICAgIHBvc2l0aW9uPTAsCikKZGVmIHVzZXIodXVpZCk6CiAgICByZXR1cm4gVXNlci5mcm9tX3V1aWQodXVpZCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlAAAAAAAAAOUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"left_delete",
					null,
					"AQAAAPkAAAAAAAAA+QAAAAAAAAAhAAAAZ3JpZD0wLDEgIHBhZGRpbmc9NSBwb3M6c3RpY2t5PScn",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5AAAAAAAAABoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "pack"
					},
					"BAAAAPkAAAAAAAAA+gAAAAAAAAAAAAAA+gAAAAAAAAD7AAAAAAAAAAAAAAD7AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAAA/QAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5AAAAAAAAAPkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " pos"
					},
					"BAAAAP0AAAAAAAAA/gAAAAAAAAAAAAAA/gAAAAAAAAD/AAAAAAAAAAAAAAD/AAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9AAAAAAAAAP0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ":fill="
					},
					"BgAAAAEBAAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAADAQAAAAAAAAAAAAADAQAAAAAAAAQBAAAAAAAAAAAAAAQBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAGAQAAAAAAAAAAAAAGAQAAAAAAAAcBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABAQAAAAAAAAEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "BOTH"
					},
					"BAAAAAcBAAAAAAAACAEAAAAAAAAAAAAACAEAAAAAAAAJAQAAAAAAAAAAAAAJAQAAAAAAAAoBAAAAAAAAAAAAAAoBAAAAAAAACwEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHAQAAAAAAAAcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAsAQAAAAAAACwBAAAZnJvbSB0YWt0ay5jb21wb25lbnQgaW1wb3J0IENvbXBvbmVudApmcm9tIHRha3RrLm5vdGlmaWNhdGlvbiBpbXBvcnQgTm90aWZpY2F0aW9uCgpmcm9tIHRha3RrLnBhZ2UgaW1wb3J0IHJlZ2lzdGVyX3VybHBhdHRlcm4KCgpmcm9tIC4uYWRtaW4gaW1wb3J0IFVzZXIKCmZyb20gLiBpbXBvcnQgdG9kb3MKCgpjbGFzcyBJbmRleChDb21wb25lbnQpOgogICAgciIiIgogICAgXGZyYW1lIHBhZGRpbmc9MAogICAgICAgIFxmcmFtZSBwb3M6cGFjayBwb3M6ZmlsbD1CT1RICiAgICAgICAgICAgIFxzZG93bi52aWV3IHRleHQ9QHBhZ2VzLmluZGV4LndlbGNvbWUgd2lkdGg9MTEwIHNjcm9sbGFibGU9RmFsc2VcCiAgICAgICAgICAgICAgICBwb3M6Z3JpZD0wLDAgcG9zOnN0aWNreT0nbnNldycKICAgICAgICAhaWYgVXNlci5pc19sb2dpbigpCiAgICAgICAgICAgIFxjdGsuYnV0dG9uIHBvczpncmlkPTAsMiB0ZXh0PUBwYWdlcy5pbmRleC5uZXh0IHBvczpzdGlja3k9J3NlJ1wKICAgICAgICAgICAgICAgIGNvbW1hbmQ9e2d0X25leHR9CiAgICAgICAgIWlmIG5vdCBVc2VyLmlzX2xvZ2luKCkKICAgICAgICAgICAgXGN0ay5idXR0b24gcG9zOmdyaWQ9MCwyIHRleHQ9QHBhZ2VzLmluZGV4LmxvZ2luIHBvczpzdGlja3k9J3NlJ1wKICAgICAgICAgICAgICAgIGNvbW1hbmQ9e2d0X2xvZ2lufQogICAgICAgICFlbnVtIGl0ZW1zOihpZHgsIHZhbCkKICAgICAgICAgICAgXGxhYmVsIHRleHQ9e3N0cih2YWwpfSBwb3M6cGFjawogICAgIiIiCiAgICBpdGVtcyA9IHJhbmdlKDUpCgogICAgZGVmIGd0X25leHQoc2VsZik6CiAgICAgICAgaW1wb3J0IHRha3RrCgogICAgICAgIHRha3RrLmFwcGxpY2F0aW9uKCJ0b2RvcyIpCgogICAgZGVmIGd0X2xvZ2luKHNlbGYpOgogICAgICAgIGltcG9ydCB0YWt0awoKICAgICAgICB0YWt0ay5hcHBsaWNhdGlvbigic2lnbiIsICJzaWduaW4iLCByZWRpcmVjdD0idG9kb3MiKQoKICAgIFVzZXIgPSBVc2VyCgoKZGVmIGRlZmF1bHQoc3RvcmUsIC8sICoqcGFyYW1zKToKICAgIHJldHVybiBJbmRleCgpCgoKQHJlZ2lzdGVyX3VybHBhdHRlcm4oCiAgICByIltcZGEtZl17OH1cLVtcZGEtZl17NH1cLVtcZGEtZl17NH1cLVtcZGEtZl17NH1cLVtcZGEtZl17MTJ9IiwKICAgIHBvc2l0aW9uPTAsCikKZGVmIHVzZXIodXVpZCk6CiAgICByZXR1cm4gVXNlci5mcm9tX3V1aWQodXVpZCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALAQAAAAAAAAsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAG4BAAAAAAAAbgEAAAAAAAAEAAAAZ3JpZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuAQAAAAAAAHIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "pack"
					},
					"BAAAAG4BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABwAQAAAAAAAAAAAABwAQAAAAAAAHEBAAAAAAAAAAAAAHEBAAAAAAAAcgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuAQAAAAAAAG4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAHIBAAAAAAAAcgEAAAAAAAAWAAAAPTAsMCBwb3M6c3RpY2t5PSduc2V3Jw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByAQAAAAAAAIgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": " pos:fi"
					},
					"BwAAAHIBAAAAAAAAcwEAAAAAAAAAAAAAcwEAAAAAAAB0AQAAAAAAAAAAAAB0AQAAAAAAAHUBAAAAAAAAAAAAAHUBAAAAAAAAdgEAAAAAAAAAAAAAdgEAAAAAAAB3AQAAAAAAAAAAAAB3AQAAAAAAAHgBAAAAAAAAAAAAAHgBAAAAAAAAeQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByAQAAAAAAAHIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "l=BOTH"
					},
					"BgAAAHkBAAAAAAAAegEAAAAAAAAAAAAAegEAAAAAAAB7AQAAAAAAAAAAAAB7AQAAAAAAAHwBAAAAAAAAAAAAAHwBAAAAAAAAfQEAAAAAAAAAAAAAfQEAAAAAAAB+AQAAAAAAAAAAAAB+AQAAAAAAAH8BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5AQAAAAAAAHkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAApwQAAAAAAACnBAAAZnJvbSB0YWt0ay5jb21wb25lbnQgaW1wb3J0IENvbXBvbmVudApmcm9tIHRha3RrLm5vdGlmaWNhdGlvbiBpbXBvcnQgTm90aWZpY2F0aW9uCgpmcm9tIHRha3RrLnBhZ2UgaW1wb3J0IHJlZ2lzdGVyX3VybHBhdHRlcm4KCgpmcm9tIC4uYWRtaW4gaW1wb3J0IFVzZXIKCmZyb20gLiBpbXBvcnQgdG9kb3MKCgpjbGFzcyBJbmRleChDb21wb25lbnQpOgogICAgciIiIgogICAgXGZyYW1lIHBhZGRpbmc9MAogICAgICAgIFxmcmFtZSBwb3M6cGFjayBwb3M6ZmlsbD1CT1RICiAgICAgICAgICAgIFxzZG93bi52aWV3IHRleHQ9QHBhZ2VzLmluZGV4LndlbGNvbWUgd2lkdGg9MTEwIHNjcm9sbGFibGU9RmFsc2VcCiAgICAgICAgICAgICAgICBwb3M6cGFjayBwb3M6ZmlsPUJPVEgKICAgICAgICAhaWYgVXNlci5pc19sb2dpbigpCiAgICAgICAgICAgIFxjdGsuYnV0dG9uIHBvczpncmlkPTAsMiB0ZXh0PUBwYWdlcy5pbmRleC5uZXh0IHBvczpzdGlja3k9J3NlJ1wKICAgICAgICAgICAgICAgIGNvbW1hbmQ9e2d0X25leHR9CiAgICAgICAgIWlmIG5vdCBVc2VyLmlzX2xvZ2luKCkKICAgICAgICAgICAgXGN0ay5idXR0b24gcG9zOmdyaWQ9MCwyIHRleHQ9QHBhZ2VzLmluZGV4LmxvZ2luIHBvczpzdGlja3k9J3NlJ1wKICAgICAgICAgICAgICAgIGNvbW1hbmQ9e2d0X2xvZ2lufQogICAgICAgICFlbnVtIGl0ZW1zOihpZHgsIHZhbCkKICAgICAgICAgICAgXGxhYmVsIHRleHQ9e3N0cih2YWwpfSBwb3M6cGFjawogICAgIiIiCiAgICBpdGVtcyA9IHJhbmdlKDUpCgogICAgZGVmIGd0X25leHQoc2VsZik6CiAgICAgICAgaW1wb3J0IHRha3RrCgogICAgICAgIHRha3RrLmFwcGxpY2F0aW9uKCJ0b2RvcyIpCgogICAgZGVmIGd0X2xvZ2luKHNlbGYpOgogICAgICAgIGltcG9ydCB0YWt0awoKICAgICAgICB0YWt0ay5hcHBsaWNhdGlvbigic2lnbiIsICJzaWduaW4iLCByZWRpcmVjdD0idG9kb3MiKQoKICAgIFVzZXIgPSBVc2VyCgoKZGVmIGRlZmF1bHQoc3RvcmUsIC8sICoqcGFyYW1zKToKICAgIHJldHVybiBJbmRleCgpCgoKQHJlZ2lzdGVyX3VybHBhdHRlcm4oCiAgICByIltcZGEtZl17OH1cLVtcZGEtZl17NH1cLVtcZGEtZl17NH1cLVtcZGEtZl17NH1cLVtcZGEtZl17MTJ9IiwKICAgIHBvc2l0aW9uPTAsCikKZGVmIHVzZXIodXVpZCk6CiAgICByZXR1cm4gVXNlci5mcm9tX3V1aWQodXVpZCkK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/AQAAAAAAAH8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAALgBAAAAAAAAuAEAAAAAAAAIAAAAZ3JpZD0wLDI",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAAQAAAAAAALgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "pack"
					},
					"BAAAALgBAAAAAAAAuQEAAAAAAAAAAAAAuQEAAAAAAAC6AQAAAAAAAAAAAAC6AQAAAAAAALsBAAAAAAAAAAAAALsBAAAAAAAAvAEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AQAAAAAAALgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					1,
					"cut",
					null,
					"AQAAAPUBAAAAAAAA9QEAAAAAAAARAAAAY29tbWFuZD17Z3RfbmV4dH0",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAgAAAAAAAPUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					6,
					"left_delete",
					null,
					"BgAAAPEBAAAAAAAA8QEAAAAAAAAEAAAAICAgIO0BAAAAAAAA7QEAAAAAAAAEAAAAICAgIOkBAAAAAAAA6QEAAAAAAAAEAAAAICAgIOUBAAAAAAAA5QEAAAAAAAAEAAAAICAgIOQBAAAAAAAA5AEAAAAAAAABAAAACuMBAAAAAAAA4wEAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1AQAAAAAAAPUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMBAAAAAAAA5AEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjAQAAAAAAAOMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"paste",
					null,
					"AQAAAOQBAAAAAAAA9QEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkAQAAAAAAAOQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"left_delete",
					null,
					"AQAAAOMBAAAAAAAA4wEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkAQAAAAAAAOQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AQAAAOMBAAAAAAAA5AEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjAQAAAAAAAOMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "\n\t"
					},
					"AwAAAOQBAAAAAAAA5QEAAAAAAAAAAAAA5QEAAAAAAADxAQAAAAAAAAAAAADxAQAAAAAAAPUBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkAQAAAAAAAOQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"left_delete",
					null,
					"AQAAAEMCAAAAAAAAQwIAAAAAAAAIAAAAZ3JpZD0wLDI",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDAgAAAAAAAEsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": "pack"
					},
					"BAAAAEMCAAAAAAAARAIAAAAAAAAAAAAARAIAAAAAAABFAgAAAAAAAAAAAABFAgAAAAAAAEYCAAAAAAAAAAAAAEYCAAAAAAAARwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDAgAAAAAAAEMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					16,
					"left_delete",
					null,
					"IAAAAG4CAAAAAAAAbgIAAAAAAAABAAAAJ+IBAAAAAAAA4gEAAAAAAAABAAAAJ2wCAAAAAAAAbAIAAAAAAAABAAAAZeEBAAAAAAAA4QEAAAAAAAABAAAAZWoCAAAAAAAAagIAAAAAAAABAAAAc+ABAAAAAAAA4AEAAAAAAAABAAAAc2gCAAAAAAAAaAIAAAAAAAABAAAAJ98BAAAAAAAA3wEAAAAAAAABAAAAJ2YCAAAAAAAAZgIAAAAAAAABAAAAPd4BAAAAAAAA3gEAAAAAAAABAAAAPWQCAAAAAAAAZAIAAAAAAAABAAAAed0BAAAAAAAA3QEAAAAAAAABAAAAeWICAAAAAAAAYgIAAAAAAAABAAAAa9wBAAAAAAAA3AEAAAAAAAABAAAAa2ACAAAAAAAAYAIAAAAAAAABAAAAY9sBAAAAAAAA2wEAAAAAAAABAAAAY14CAAAAAAAAXgIAAAAAAAABAAAAadoBAAAAAAAA2gEAAAAAAAABAAAAaVwCAAAAAAAAXAIAAAAAAAABAAAAdNkBAAAAAAAA2QEAAAAAAAABAAAAdFoCAAAAAAAAWgIAAAAAAAABAAAAc9gBAAAAAAAA2AEAAAAAAAABAAAAc1gCAAAAAAAAWAIAAAAAAAABAAAAOtcBAAAAAAAA1wEAAAAAAAABAAAAOlYCAAAAAAAAVgIAAAAAAAABAAAAc9YBAAAAAAAA1gEAAAAAAAABAAAAc1QCAAAAAAAAVAIAAAAAAAABAAAAb9UBAAAAAAAA1QEAAAAAAAABAAAAb1ICAAAAAAAAUgIAAAAAAAABAAAAcNQBAAAAAAAA1AEAAAAAAAABAAAAcFACAAAAAAAAUAIAAAAAAAABAAAAINMBAAAAAAAA0wEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAADjAQAAAAAAAOMBAAAAAAAAAAAAAAAA8L9vAgAAAAAAAG8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"left_delete",
					null,
					"AgAAAE8CAAAAAAAATwIAAAAAAAABAAAAXNMBAAAAAAAA0wEAAAAAAAABAAAAXA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAADUAQAAAAAAANQBAAAAAAAAAAAAAAAA8L9QAgAAAAAAAFACAAAAAAAAAAAAAAAA8L8"
				],
				[
					133,
					5,
					"left_delete",
					null,
					"CgAAAFsCAAAAAAAAWwIAAAAAAAAEAAAAICAgIOABAAAAAAAA4AEAAAAAAAADAAAAICAgVAIAAAAAAABUAgAAAAAAAAQAAAAgICAg3AEAAAAAAADcAQAAAAAAAAQAAAAgICAgTAIAAAAAAABMAgAAAAAAAAQAAAAgICAg2AEAAAAAAADYAQAAAAAAAAQAAAAgICAgRAIAAAAAAABEAgAAAAAAAAQAAAAgICAg1AEAAAAAAADUAQAAAAAAAAQAAAAgICAgPwIAAAAAAAA/AgAAAAAAAAEAAAAK0wEAAAAAAADTAQAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAADjAQAAAAAAAOMBAAAAAAAAAAAAAAAA8L9fAgAAAAAAAF8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAD4CAAAAAAAAPwIAAAAAAAAAAAAA0wEAAAAAAADUAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAADTAQAAAAAAANMBAAAAAAAAAAAAAAAA8L8+AgAAAAAAAD4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					140,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAXgQAAAAAAABeBAAAZnJvbSB0YWt0ay5jb21wb25lbnQgaW1wb3J0IENvbXBvbmVudApmcm9tIHRha3RrLm5vdGlmaWNhdGlvbiBpbXBvcnQgTm90aWZpY2F0aW9uCgpmcm9tIHRha3RrLnBhZ2UgaW1wb3J0IHJlZ2lzdGVyX3VybHBhdHRlcm4KCgpmcm9tIC4uYWRtaW4gaW1wb3J0IFVzZXIKCmZyb20gLiBpbXBvcnQgdG9kb3MKCgpjbGFzcyBJbmRleChDb21wb25lbnQpOgogICAgciIiIgogICAgXGZyYW1lIHBhZGRpbmc9MAogICAgICAgIFxmcmFtZSBwb3M6cGFjayBwb3M6ZmlsbD1CT1RICiAgICAgICAgICAgIFxzZG93bi52aWV3IHRleHQ9QHBhZ2VzLmluZGV4LndlbGNvbWUgd2lkdGg9MTEwIHNjcm9sbGFibGU9RmFsc2VcCiAgICAgICAgICAgICAgICBwb3M6cGFjayBwb3M6ZmlsPUJPVEgKICAgICAgICAhaWYgVXNlci5pc19sb2dpbigpCiAgICAgICAgICAgIFxjdGsuYnV0dG9uIHBvczpwYWNrIHRleHQ9QHBhZ2VzLmluZGV4Lm5leHQgIGNvbW1hbmQ9e2d0X25leHR9CiAgICAgICAgIWlmIG5vdCBVc2VyLmlzX2xvZ2luKCkKICAgICAgICAgICAgXGN0ay5idXR0b24gcG9zOnBhY2sgdGV4dD1AcGFnZXMuaW5kZXgubG9naW4gY29tbWFuZD17Z3RfbG9naW59CiAgICAgICAgIWVudW0gaXRlbXM6KGlkeCwgdmFsKQogICAgICAgICAgICBcbGFiZWwgdGV4dD17c3RyKHZhbCl9IHBvczpwYWNrCiAgICAiIiIKICAgIGl0ZW1zID0gcmFuZ2UoNSkKCiAgICBkZWYgZ3RfbmV4dChzZWxmKToKICAgICAgICBpbXBvcnQgdGFrdGsKCiAgICAgICAgdGFrdGsuYXBwbGljYXRpb24oInRvZG9zIikKCiAgICBkZWYgZ3RfbG9naW4oc2VsZik6CiAgICAgICAgaW1wb3J0IHRha3RrCgogICAgICAgIHRha3RrLmFwcGxpY2F0aW9uKCJzaWduIiwgInNpZ25pbiIsIHJlZGlyZWN0PSJ0b2RvcyIpCgogICAgVXNlciA9IFVzZXIKCgpkZWYgZGVmYXVsdChzdG9yZSwgLywgKipwYXJhbXMpOgogICAgcmV0dXJuIEluZGV4KCkKCgpAcmVnaXN0ZXJfdXJscGF0dGVybigKICAgIHIiW1xkYS1mXXs4fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXsxMn0iLAogICAgcG9zaXRpb249MCwKKQpkZWYgdXNlcih1dWlkKToKICAgIHJldHVybiBVc2VyLmZyb21fdXVpZCh1dWlkKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxAgAAAAAAAHECAAAAAAAAAAAAAABAZ0A"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ0CAAAAAAAAngIAAAAAAAAAAAAAngIAAAAAAACqAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACdAgAAAAAAAJ0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					147,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKoCAAAAAAAArAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqAgAAAAAAAKoCAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAKsCAAAAAAAArAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrAgAAAAAAAKsCAAAAAAAAAAAAAAAA8L8"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKwCAAAAAAAArQIAAAAAAAAAAAAArQIAAAAAAACuAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsAgAAAAAAAKwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": " 4"
					},
					"AgAAAK4CAAAAAAAArwIAAAAAAAAAAAAArwIAAAAAAACwAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuAgAAAAAAAK4CAAAAAAAAAAAAAAAA8L8"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAALACAAAAAAAAsQIAAAAAAAAAAAAAsQIAAAAAAACyAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwAgAAAAAAALACAAAAAAAAAAAAAAAA8L8"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " 6"
					},
					"AgAAALICAAAAAAAAswIAAAAAAAAAAAAAswIAAAAAAAC0AgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyAgAAAAAAALICAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"left_delete",
					null,
					"AQAAAJ4CAAAAAAAAngIAAAAAAAAYAAAAICAgICAgICAgICAgezMgPSA0ICsgNn0K",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAgAAAAAAALYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					157,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAAXgQAAAAAAABeBAAAZnJvbSB0YWt0ay5jb21wb25lbnQgaW1wb3J0IENvbXBvbmVudApmcm9tIHRha3RrLm5vdGlmaWNhdGlvbiBpbXBvcnQgTm90aWZpY2F0aW9uCgpmcm9tIHRha3RrLnBhZ2UgaW1wb3J0IHJlZ2lzdGVyX3VybHBhdHRlcm4KCgpmcm9tIC4uYWRtaW4gaW1wb3J0IFVzZXIKCmZyb20gLiBpbXBvcnQgdG9kb3MKCgpjbGFzcyBJbmRleChDb21wb25lbnQpOgogICAgciIiIgogICAgXGZyYW1lIHBhZGRpbmc9MAogICAgICAgIFxmcmFtZSBwb3M6cGFjayBwb3M6ZmlsbD1CT1RICiAgICAgICAgICAgIFxzZG93bi52aWV3IHRleHQ9QHBhZ2VzLmluZGV4LndlbGNvbWUgd2lkdGg9MTEwIHNjcm9sbGFibGU9RmFsc2VcCiAgICAgICAgICAgICAgICBwb3M6cGFjayBwb3M6ZmlsPUJPVEgKICAgICAgICAhaWYgVXNlci5pc19sb2dpbigpCiAgICAgICAgICAgIFxjdGsuYnV0dG9uIHBvczpwYWNrIHRleHQ9QHBhZ2VzLmluZGV4Lm5leHQgIGNvbW1hbmQ9e2d0X25leHR9CiAgICAgICAgIWlmIG5vdCBVc2VyLmlzX2xvZ2luKCkKICAgICAgICAgICAgXGN0ay5idXR0b24gcG9zOnBhY2sgdGV4dD1AcGFnZXMuaW5kZXgubG9naW4gY29tbWFuZD17Z3RfbG9naW59CiAgICAgICAgIWVudW0gaXRlbXM6KGlkeCwgdmFsKQogICAgICAgICAgICBcbGFiZWwgdGV4dD17c3RyKHZhbCl9IHBvczpwYWNrCiAgICAiIiIKICAgIGl0ZW1zID0gcmFuZ2UoNSkKCiAgICBkZWYgZ3RfbmV4dChzZWxmKToKICAgICAgICBpbXBvcnQgdGFrdGsKCiAgICAgICAgdGFrdGsuYXBwbGljYXRpb24oInRvZG9zIikKCiAgICBkZWYgZ3RfbG9naW4oc2VsZik6CiAgICAgICAgaW1wb3J0IHRha3RrCgogICAgICAgIHRha3RrLmFwcGxpY2F0aW9uKCJzaWduIiwgInNpZ25pbiIsIHJlZGlyZWN0PSJ0b2RvcyIpCgogICAgVXNlciA9IFVzZXIKCgpkZWYgZGVmYXVsdChzdG9yZSwgLywgKipwYXJhbXMpOgogICAgcmV0dXJuIEluZGV4KCkKCgpAcmVnaXN0ZXJfdXJscGF0dGVybigKICAgIHIiW1xkYS1mXXs4fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXs0fVwtW1xkYS1mXXsxMn0iLAogICAgcG9zaXRpb249MCwKKQpkZWYgdXNlcih1dWlkKToKICAgIHJldHVybiBVc2VyLmZyb21fdXVpZCh1dWlkKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeAgAAAAAAAJ4CAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/taktk/application.py",
			"settings":
			{
				"buffer_size": 9736,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAMMHAAAAAAAAwwcAAAAAAAAbAAAAICAgIGRlc3Ryb3lfY2FjaGU6IGludCA9IDUK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDBwAAAAAAAN4HAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAJcGAAAAAAAAlwYAAAAAAACPAAAAICAgIC0gKipkZXN0cm95X2NhY2hlKio6IEV4cGVyaW1lbnRhbDogZGVzdHJveXMgb25seSB0aGUgbGFzdCB7eH0gdmlld2VkCiAgICAgIGNvbXBvbmVudCdzIHdpZGdldCB0byByZWR1Y2UgY2hhbmNlcyBmb3IgYXBwIHRvIGFicnVwdGx5IHJlc2l6ZQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXBgAAAAAAACYHAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXBgAAAAAAAJcGAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					3,
					"left_delete",
					null,
					"AwAAAD4dAAAAAAAAPh0AAAAAAAASAAAAc2VsZi5kZXN0cm95X2NhY2hlPR0AAAAAAAA9HQAAAAAAAAEAAAAgPB0AAAAAAAA8HQAAAAAAAAEAAAAs",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+HQAAAAAAAFAdAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ".s"
					},
					"AgAAADwdAAAAAAAAPR0AAAAAAAAAAAAAPR0AAAAAAAA+HQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8HQAAAAAAADwdAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"left_delete",
					null,
					"AQAAAD0dAAAAAAAAPR0AAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+HQAAAAAAAD4dAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "get_stor"
					},
					"CAAAAD0dAAAAAAAAPh0AAAAAAAAAAAAAPh0AAAAAAAA/HQAAAAAAAAAAAAA/HQAAAAAAAEAdAAAAAAAAAAAAAEAdAAAAAAAAQR0AAAAAAAAAAAAAQR0AAAAAAABCHQAAAAAAAAAAAABCHQAAAAAAAEMdAAAAAAAAAAAAAEMdAAAAAAAARB0AAAAAAAAAAAAARB0AAAAAAABFHQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9HQAAAAAAAD0dAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAEUdAAAAAAAARh0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABFHQAAAAAAAEUdAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEYdAAAAAAAASB0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGHQAAAAAAAEYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHHQAAAAAAAEcdAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAAEYdAAAAAAAARh0AAAAAAAACAAAAKCk",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABIHQAAAAAAAEYdAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGHQAAAAAAAEYdAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/taktk/page.py",
			"settings":
			{
				"buffer_size": 8815,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAI4DAAAAAAAAjgMAAAAAAAADAAAAYXBw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAwAAAAAAAJEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "store"
					},
					"BQAAAI4DAAAAAAAAjwMAAAAAAAAAAAAAjwMAAAAAAACQAwAAAAAAAAAAAACQAwAAAAAAAJEDAAAAAAAAAAAAAJEDAAAAAAAAkgMAAAAAAAAAAAAAkgMAAAAAAACTAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACOAwAAAAAAAI4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAJYDAAAAAAAAlgMAAAAAAAALAAAAYXBwbGljYXRpb24",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWAwAAAAAAAKEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "store"
					},
					"BQAAAJYDAAAAAAAAlwMAAAAAAAAAAAAAlwMAAAAAAACYAwAAAAAAAAAAAACYAwAAAAAAAJkDAAAAAAAAAAAAAJkDAAAAAAAAmgMAAAAAAAAAAAAAmgMAAAAAAACbAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWAwAAAAAAAJYDAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAAJwDAAAAAAAAnAMAAAAAAAALAAAAQXBwbGljYXRpb24",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcAwAAAAAAAKcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "Store"
					},
					"BQAAAJwDAAAAAAAAnQMAAAAAAAAAAAAAnQMAAAAAAACeAwAAAAAAAAAAAACeAwAAAAAAAJ8DAAAAAAAAAAAAAJ8DAAAAAAAAoAMAAAAAAAAAAAAAoAMAAAAAAAChAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcAwAAAAAAAJwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAJsDAAAAAAAAnAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbAwAAAAAAAJsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcAwAAAAAAAJwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"left_delete",
					null,
					"AgAAAFoFAAAAAAAAWgUAAAAAAAADAAAAYXBwVAUAAAAAAABUBQAAAAAAAAMAAABhcHA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAABUBQAAAAAAAFcFAAAAAAAAAAAAAAAA8L9aBQAAAAAAAF0FAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "store"
					},
					"CgAAAFcFAAAAAAAAWAUAAAAAAAAAAAAAVAUAAAAAAABVBQAAAAAAAAAAAABZBQAAAAAAAFoFAAAAAAAAAAAAAFUFAAAAAAAAVgUAAAAAAAAAAAAAWwUAAAAAAABcBQAAAAAAAAAAAABWBQAAAAAAAFcFAAAAAAAAAAAAAF0FAAAAAAAAXgUAAAAAAAAAAAAAVwUAAAAAAABYBQAAAAAAAAAAAABfBQAAAAAAAGAFAAAAAAAAAAAAAFgFAAAAAAAAWQUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAABUBQAAAAAAAFQFAAAAAAAAAAAAAAAA8L9XBQAAAAAAAFcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					44,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAABZBQAAAAAAAFkFAAAAAAAAAAAAAAAA8L9hBQAAAAAAAGEFAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"paste",
					null,
					"AQAAAKEWAAAAAAAAqxYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChFgAAAAAAAKEWAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAAKsWAAAAAAAArBYAAAAAAAAAAAAArBYAAAAAAACtFgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrFgAAAAAAAKsWAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " if"
					},
					"AwAAAK0WAAAAAAAArhYAAAAAAAAAAAAArhYAAAAAAACvFgAAAAAAAAAAAACvFgAAAAAAALAWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtFgAAAAAAAK0WAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " callable"
					},
					"CQAAALAWAAAAAAAAsRYAAAAAAAAAAAAAsRYAAAAAAACyFgAAAAAAAAAAAACyFgAAAAAAALMWAAAAAAAAAAAAALMWAAAAAAAAtBYAAAAAAAAAAAAAtBYAAAAAAAC1FgAAAAAAAAAAAAC1FgAAAAAAALYWAAAAAAAAAAAAALYWAAAAAAAAtxYAAAAAAAAAAAAAtxYAAAAAAAC4FgAAAAAAAAAAAAC4FgAAAAAAALkWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwFgAAAAAAALAWAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAALkWAAAAAAAAuhYAAAAAAAAAAAAAuhYAAAAAAAC7FgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5FgAAAAAAALkWAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "self.stor"
					},
					"CQAAALoWAAAAAAAAuxYAAAAAAAAAAAAAuxYAAAAAAAC8FgAAAAAAAAAAAAC8FgAAAAAAAL0WAAAAAAAAAAAAAL0WAAAAAAAAvhYAAAAAAAAAAAAAvhYAAAAAAAC/FgAAAAAAAAAAAAC/FgAAAAAAAMAWAAAAAAAAAAAAAMAWAAAAAAAAwRYAAAAAAAAAAAAAwRYAAAAAAADCFgAAAAAAAAAAAADCFgAAAAAAAMMWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6FgAAAAAAALoWAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAMMWAAAAAAAAxBYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDFgAAAAAAAMMWAAAAAAAAAAAAAAAA8L8"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " else"
					},
					"BQAAAMUWAAAAAAAAxhYAAAAAAAAAAAAAxhYAAAAAAADHFgAAAAAAAAAAAADHFgAAAAAAAMgWAAAAAAAAAAAAAMgWAAAAAAAAyRYAAAAAAAAAAAAAyRYAAAAAAADKFgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFFgAAAAAAAMUWAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoWAAAAAAAAyxYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKFgAAAAAAAMoWAAAAAAAAAAAAAAAA8L8"
				],
				[
					85,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLFgAAAAAAAMsWAAAAAAAAAAAAAAAA8L8"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAN8CAAAAAAAA4AIAAAAAAAAAAAAA4AIAAAAAAADhAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfAgAAAAAAAN8CAAAAAAAAAAAAAAAA8L8"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " Call"
					},
					"BQAAAOECAAAAAAAA4gIAAAAAAAAAAAAA4gIAAAAAAADjAgAAAAAAAAAAAADjAgAAAAAAAOQCAAAAAAAAAAAAAOQCAAAAAAAA5QIAAAAAAAAAAAAA5QIAAAAAAADmAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhAgAAAAAAAOECAAAAAAAAAAAAAAAA8L8"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "able"
					},
					"BAAAAOYCAAAAAAAA5wIAAAAAAAAAAAAA5wIAAAAAAADoAgAAAAAAAAAAAADoAgAAAAAAAOkCAAAAAAAAAAAAAOkCAAAAAAAA6gIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmAgAAAAAAAOYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " |"
					},
					"AgAAAK0DAAAAAAAArgMAAAAAAAAAAAAArgMAAAAAAACvAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAwAAAAAAAK0DAAAAAAAAAAAAAAAA8L8"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": " Cal"
					},
					"BAAAAK8DAAAAAAAAsAMAAAAAAAAAAAAAsAMAAAAAAACxAwAAAAAAAAAAAACxAwAAAAAAALIDAAAAAAAAAAAAALIDAAAAAAAAswMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvAwAAAAAAAK8DAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"insert_dimensions",
					null,
					"AgAAALADAAAAAAAAsAMAAAAAAAADAAAAQ2FssAMAAAAAAAC4AwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzAwAAAAAAALMDAAAAAAAAAAAAAAAA8L8"
				],
				[
					101,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AwAAAAAAALgDAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN4AAAAAAAAA3wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADeAAAAAAAAAN4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " Call"
					},
					"BQAAAN8AAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADhAAAAAAAAAAAAAADhAAAAAAAAAOIAAAAAAAAAAAAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA4wAAAAAAAADkAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfAAAAAAAAAN8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert_dimensions",
					null,
					"AgAAAOAAAAAAAAAA4AAAAAAAAAAEAAAAQ2FsbOAAAAAAAAAA6AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkAAAAAAAAAOQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoAAAAAAAAAOgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					119,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAIIFAAAAAAAAggUAAAAAAAAlAAAAICAgICAgICBzZWxmLnN0b3JlID0gYXBwLmdldF9zdG9yZSgpCg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBQAAAAAAAKcFAAAAAAAAAAAAAAAA8L8"
				],
				[
					122,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBQAAAAAAAIIFAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "examples/todoapp/todoapp/taktk.py",
			"settings":
			{
				"buffer_size": 3812,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAANAGAAAAAAAA0AYAAAAAAAA0AAAAICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIHByaW50KGUpCg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANAGAAAAAAAABAcAAAAAAAAAAAAAAADwvw"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAAIgGAAAAAAAAiAYAAAAAAAANAAAAICAgICAgICB0cnk6Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgGAAAAAAAAlQYAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAJAGAAAAAAAAkAYAAAAAAAAEAAAAICAgIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQGAAAAAAAAlAYAAAAAAAAAAAAAAADwvw"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "get_"
					},
					"BAAAAK8GAAAAAAAAsAYAAAAAAAAAAAAAsAYAAAAAAACxBgAAAAAAAAAAAACxBgAAAAAAALIGAAAAAAAAAAAAALIGAAAAAAAAswYAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK8GAAAAAAAArwYAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "()"
					},
					"AgAAALgGAAAAAAAAuQYAAAAAAAAAAAAAuQYAAAAAAAC6BgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALgGAAAAAAAAuAYAAAAAAAAAAAAAAADwvw"
				],
				[
					20,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA3g4AAAAAAADeDgAAaW1wb3J0IHRha3RrCmltcG9ydCB0YWt0ay5hcHBsaWNhdGlvbgppbXBvcnQgdGFrdGsuY29tcG9uZW50CmltcG9ydCB0YWt0ay5kaWN0aW9uYXJ5CmltcG9ydCB0YWt0ay5tZW51CmltcG9ydCB0YWt0ay5ub3RpZmljYXRpb24KaW1wb3J0IHRha3RrLndyaXRlYWJsZQoKCmZyb20gLiBpbXBvcnQgcGFnZXMKCmZyb20gLmFkbWluIGltcG9ydCBESVIKCnJlY2VudF9maWxlcyA9IFsiYW1hLnB5IiwgInRlc3QucHkiLCAidHRrYm9vdHN0cmFwLnB5IiwgImxhYmVsLnB5Il0KCgpjbGFzcyBBcHBsaWNhdGlvbih0YWt0ay5hcHBsaWNhdGlvbi5BcHBsaWNhdGlvbik6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygKICAgICAgICAgICAgaWNvbj0iQGljb24iLAogICAgICAgICAgICBkaWN0aW9uYXJpZXM9RElSIC8gImRpY3Rpb25hcmllcyIsCiAgICAgICAgICAgIG1lZGlhX3BhdGg9RElSIC8gIm1lZGlhIiwKICAgICAgICAgICAgcGFyYW1zPWRpY3QoCiAgICAgICAgICAgICAgICB0aGVtZW5hbWU9ImRhcmtseSIsCiAgICAgICAgICAgICAgICBtaW5zaXplPSg4MDAsIDQwMCksCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGFkZHJlc3M9KCIiLCA1Njc4OSksCiAgICAgICAgICAgIG1lbnU9dGFrdGsubWFrZV9tZW51KAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAZmlsZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIkBvcGVuIjogbGFtYmRhOiBOb25lLAogICAgICAgICAgICAgICAgICAgICAgICAiIXNlcCI6IE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICJAL21lbnUucXVpdCI6IGV4aXQsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiQHByZWZlcmVuY2VzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiQGxhbmd1YWdlIjoge30sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiQHF1aXQiOiBleGl0LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9ucz0ibWVudSIsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIHN0b3JlPSgKICAgICAgICAgICAgICAgIERJUiAvICJzdG9yZS5qc29uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibGFuZ3VhZ2UiOiAiZW5nbGlzaCIsCiAgICAgICAgICAgICAgICAgICAgInRoZW1lIjogImRhcmtseSIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICApLAogICAgICAgICAgICBwYWdlcz1wYWdlcywKICAgICAgICAgICAgbGF5b3V0PUxheW91dCwKICAgICAgICApCgogICAgZGVmIGluaXQoc2VsZik6CiAgICAgICAgc2VsZi5tZW51WyJAcHJlZmVyZW5jZXMvQGxhbmd1YWdlIl0gPSB7CiAgICAgICAgICAgIGxhbmc6IHNlbGYuZGljdGlvbmFyaWVzLmdldChsYW5nKS5pbnN0YWxsCiAgICAgICAgICAgIGZvciBsYW5nIGluIHNlbGYuZGljdGlvbmFyaWVzLmxhbmd1YWdlcwogICAgICAgIH0KICAgICAgICBzdHlsZSA9IHNlbGYucm9vdC5zdHlsZQogICAgICAgIHNlbGYubWVudVsiQHByZWZlcmVuY2VzL0B0aGVtZSJdID0gewogICAgICAgICAgICB0OiBsYW1iZGEgcz1zZWxmLnNldF90aGVtZSwgdD10OiBzKHQpIGZvciB0IGluIHN0eWxlLnRoZW1lX25hbWVzKCkKICAgICAgICB9CiAgICAgICAgc2VsZi5yb290LnN0eWxlLnRoZW1lX3VzZShzZWxmLmdldF9zdG9yZSgpWyJ0aGVtZSJdKQogICAgICAgIHNlbGYubWVudS51cGRhdGUoKQogICAgICAgIHNlbGYuc2V0X2xhbmd1YWdlKHNlbGYuZ2V0X3N0b3JlKClbImxhbmd1YWdlIl0pCiAgICAgICAgdGFrdGsuZGljdGlvbmFyeS5EaWN0aW9uYXJ5LnN1YnNjcmliZShOb25lLCBzZWxmLnVwZGF0ZV9sYW5ndWFnZSkKCiAgICBkZWYgc2V0X3RoZW1lKHNlbGYsIHRoZW1lKToKICAgICAgICBmcm9tIGJ1aWx0aW5zIGltcG9ydCBfCgogICAgICAgIHNlbGYucm9vdC5zdHlsZS50aGVtZV91c2UodGhlbWUpCiAgICAgICAgc2VsZi5zdG9yZVsidGhlbWUiXSA9IHRoZW1lCiAgICAgICAgdGFrdGsubm90aWZ5KAogICAgICAgICAgICAiVG9kb3MiLAogICAgICAgICAgICBfKCJwcmVmZXJlbmNlcy5zdWNjZXNzX21vZGlmaWVkIiksCiAgICAgICAgICAgIGJvb3RzdHlsZT0iaW5mbyIsCiAgICAgICAgICAgIGR1cmF0aW9uPTEwMDAwLAogICAgICAgICkKCiAgICBkZWYgYmFjayhzZWxmKToKICAgICAgICBzZWxmLnZpZXcuYmFjaygpCgogICAgZGVmIGZvcndhcmQoc2VsZik6CiAgICAgICAgc2VsZi52aWV3LmZvcndhcmQoKQoKICAgIGRlZiB1cGRhdGVfbGFuZ3VhZ2Uoc2VsZik6CiAgICAgICAgc3RvcmUgPSBzZWxmLmdldF9zdG9yZSgpCiAgICAgICAgc3RvcmVbImxhbmd1YWdlIl0gPSBfLmxhbmd1YWdlCiAgICAgICAgc3RvcmUuc2F2ZSgpCiAgICAgICAgdGFrdGsubm90aWZpY2F0aW9uLk5vdGlmaWNhdGlvbigKICAgICAgICAgICAgIlRvZG9zIiwKICAgICAgICAgICAgXygicHJlZmVyZW5jZXMuc3VjY2Vzc19tb2RpZmllZCIpLAogICAgICAgICAgICBib290c3R5bGU9ImluZm8iLAogICAgICAgICAgICBkdXJhdGlvbj0xMDAwMCwKICAgICAgICApLnNob3coKQoKCkB0YWt0ay5jb21wb25lbnQuY29tcG9uZW50CmRlZiBMYXlvdXQoc2VsZik6CiAgICByIiIiCiAgICBcZnJhbWUKICAgICAgICBcZnJhbWUgcGFkZGluZz01IHBvczpwYWNrCiAgICAgICAgICAgIFxidXR0b24gY29tbWFuZD17YmFja30gICAgICAgIGltYWdlPTxpbWc6QGJhY2t3YXJke3dpZHRoOiAyMH0+IFwKICAgICAgICAgICAgICAgIHBvczpncmlkPTAsMCBwb3M6c3RpY2t5PSd3JyBib290c3R5bGU9J2Rhcmsgb3V0bGluZScKICAgICAgICAgICAgXGJ1dHRvbiBjb21tYW5kPXtndF91c2Vyc31cCiAgICAgICAgICAgICAgICBpbWFnZT08aW1nOkB1c2Vycy1iZXR3ZWVuLWxpbmVze2hlaWdodDogMjB9PiBwb3M6Z3JpZD0xLDBcCiAgICAgICAgICAgICAgICBwb3M6c3RpY2t5PSd3JyBib290c3R5bGU9J2Rhcmsgb3V0bGluZScKICAgICAgICAgICAgXGJ1dHRvbiBjb21tYW5kPXtndF90b2Rvc31cCiAgICAgICAgICAgICAgICBpbWFnZT08aW1nOkBjaGVjay1kb3VibGV7aGVpZ2h0OiAyMH0+IHBvczpncmlkPTIsMFwKICAgICAgICAgICAgICAgIHBvczpzdGlja3k9J3cnIGJvb3RzdHlsZT0nZGFyayBvdXRsaW5lJwogICAgICAgICAgICBcbGFiZWxcCiAgICAgICAgICAgICAgICB0ZXh0PXtmJ2xvZ2dlZCBpbiBhczoge1VzZXIuY3VycmVudCgpLm5hbWV9JyBpZiBVc2VyLmN1cnJlbnQoKSBlbHNlICJub3QgbG9nZ2VkIGluISJ9XAogICAgICAgICAgICAgICAgcG9zOmdyaWQ9MywwCiAgICAgICAgICAgIFxidXR0b24gY29tbWFuZD17Zm9yd2FyZH0gaW1hZ2U9PGltZzpAZm9yd2FyZHt3aWR0aDogMjB9PlwKICAgICAgICAgICAgICAgIHBvczpncmlkPTUsMCBwb3M6c3RpY2t5PSdlJyBib290c3R5bGU9J2Rhcmsgb3V0bGluZScKICAgICAgICBcZnJhbWU6b3V0bGV0IHBvczpwYWNrCiAgICAiIiIKICAgIGZyb20gLmFkbWluIGltcG9ydCBVc2VyCgogICAgdXNlciA9IE5vbmUKCiAgICBkZWYgYmFjaygpOgogICAgICAgIHRha3RrLmFwcGxpY2F0aW9uLmJhY2soKQoKICAgIGRlZiBmb3J3YXJkKCk6CiAgICAgICAgdGFrdGsuYXBwbGljYXRpb24uZm9yd2FyZCgpCgogICAgZGVmIGd0X3VzZXJzKCk6CiAgICAgICAgdGFrdGsuYXBwbGljYXRpb24oInVzZXJzIikKCiAgICBkZWYgZ3RfdG9kb3MoKToKICAgICAgICB0YWt0ay5hcHBsaWNhdGlvbigidG9kb3MiKQoKICAgIHJldHVybiBsb2NhbHMoKSB8IGdsb2JhbHMoKQo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALoGAAAAAAAAugYAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"",
					null,
					"AQAAANQHAAAAAAAA5AcAAAAAAAAKAAAAc2VsZi5zdG9yZQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANQHAAAAAAAA3gcAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"black",
					{
						"use_selection": false
					},
					"AQAAAAAAAAAAAAAA5A4AAAAAAADkDgAAaW1wb3J0IHRha3RrCmltcG9ydCB0YWt0ay5hcHBsaWNhdGlvbgppbXBvcnQgdGFrdGsuY29tcG9uZW50CmltcG9ydCB0YWt0ay5kaWN0aW9uYXJ5CmltcG9ydCB0YWt0ay5tZW51CmltcG9ydCB0YWt0ay5ub3RpZmljYXRpb24KaW1wb3J0IHRha3RrLndyaXRlYWJsZQoKCmZyb20gLiBpbXBvcnQgcGFnZXMKCmZyb20gLmFkbWluIGltcG9ydCBESVIKCnJlY2VudF9maWxlcyA9IFsiYW1hLnB5IiwgInRlc3QucHkiLCAidHRrYm9vdHN0cmFwLnB5IiwgImxhYmVsLnB5Il0KCgpjbGFzcyBBcHBsaWNhdGlvbih0YWt0ay5hcHBsaWNhdGlvbi5BcHBsaWNhdGlvbik6CiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXygKICAgICAgICAgICAgaWNvbj0iQGljb24iLAogICAgICAgICAgICBkaWN0aW9uYXJpZXM9RElSIC8gImRpY3Rpb25hcmllcyIsCiAgICAgICAgICAgIG1lZGlhX3BhdGg9RElSIC8gIm1lZGlhIiwKICAgICAgICAgICAgcGFyYW1zPWRpY3QoCiAgICAgICAgICAgICAgICB0aGVtZW5hbWU9ImRhcmtseSIsCiAgICAgICAgICAgICAgICBtaW5zaXplPSg4MDAsIDQwMCksCiAgICAgICAgICAgICksCiAgICAgICAgICAgIGFkZHJlc3M9KCIiLCA1Njc4OSksCiAgICAgICAgICAgIG1lbnU9dGFrdGsubWFrZV9tZW51KAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICJAZmlsZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgIkBvcGVuIjogbGFtYmRhOiBOb25lLAogICAgICAgICAgICAgICAgICAgICAgICAiIXNlcCI6IE5vbmUsCiAgICAgICAgICAgICAgICAgICAgICAgICJAL21lbnUucXVpdCI6IGV4aXQsCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiQHByZWZlcmVuY2VzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiQGxhbmd1YWdlIjoge30sCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiQHF1aXQiOiBleGl0LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9ucz0ibWVudSIsCiAgICAgICAgICAgICksCiAgICAgICAgICAgIHN0b3JlPSgKICAgICAgICAgICAgICAgIERJUiAvICJzdG9yZS5qc29uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAibGFuZ3VhZ2UiOiAiZW5nbGlzaCIsCiAgICAgICAgICAgICAgICAgICAgInRoZW1lIjogImRhcmtseSIsCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICApLAogICAgICAgICAgICBwYWdlcz1wYWdlcywKICAgICAgICAgICAgbGF5b3V0PUxheW91dCwKICAgICAgICApCgogICAgZGVmIGluaXQoc2VsZik6CiAgICAgICAgc2VsZi5tZW51WyJAcHJlZmVyZW5jZXMvQGxhbmd1YWdlIl0gPSB7CiAgICAgICAgICAgIGxhbmc6IHNlbGYuZGljdGlvbmFyaWVzLmdldChsYW5nKS5pbnN0YWxsCiAgICAgICAgICAgIGZvciBsYW5nIGluIHNlbGYuZGljdGlvbmFyaWVzLmxhbmd1YWdlcwogICAgICAgIH0KICAgICAgICBzdHlsZSA9IHNlbGYucm9vdC5zdHlsZQogICAgICAgIHNlbGYubWVudVsiQHByZWZlcmVuY2VzL0B0aGVtZSJdID0gewogICAgICAgICAgICB0OiBsYW1iZGEgcz1zZWxmLnNldF90aGVtZSwgdD10OiBzKHQpIGZvciB0IGluIHN0eWxlLnRoZW1lX25hbWVzKCkKICAgICAgICB9CiAgICAgICAgc2VsZi5yb290LnN0eWxlLnRoZW1lX3VzZShzZWxmLmdldF9zdG9yZSgpWyJ0aGVtZSJdKQogICAgICAgIHNlbGYubWVudS51cGRhdGUoKQogICAgICAgIHNlbGYuc2V0X2xhbmd1YWdlKHNlbGYuZ2V0X3N0b3JlKClbImxhbmd1YWdlIl0pCiAgICAgICAgdGFrdGsuZGljdGlvbmFyeS5EaWN0aW9uYXJ5LnN1YnNjcmliZShOb25lLCBzZWxmLnVwZGF0ZV9sYW5ndWFnZSkKCiAgICBkZWYgc2V0X3RoZW1lKHNlbGYsIHRoZW1lKToKICAgICAgICBmcm9tIGJ1aWx0aW5zIGltcG9ydCBfCgogICAgICAgIHNlbGYucm9vdC5zdHlsZS50aGVtZV91c2UodGhlbWUpCiAgICAgICAgc2VsZi5nZXRfc3RvcmUoKVsidGhlbWUiXSA9IHRoZW1lCiAgICAgICAgdGFrdGsubm90aWZ5KAogICAgICAgICAgICAiVG9kb3MiLAogICAgICAgICAgICBfKCJwcmVmZXJlbmNlcy5zdWNjZXNzX21vZGlmaWVkIiksCiAgICAgICAgICAgIGJvb3RzdHlsZT0iaW5mbyIsCiAgICAgICAgICAgIGR1cmF0aW9uPTEwMDAwLAogICAgICAgICkKCiAgICBkZWYgYmFjayhzZWxmKToKICAgICAgICBzZWxmLnZpZXcuYmFjaygpCgogICAgZGVmIGZvcndhcmQoc2VsZik6CiAgICAgICAgc2VsZi52aWV3LmZvcndhcmQoKQoKICAgIGRlZiB1cGRhdGVfbGFuZ3VhZ2Uoc2VsZik6CiAgICAgICAgc3RvcmUgPSBzZWxmLmdldF9zdG9yZSgpCiAgICAgICAgc3RvcmVbImxhbmd1YWdlIl0gPSBfLmxhbmd1YWdlCiAgICAgICAgc3RvcmUuc2F2ZSgpCiAgICAgICAgdGFrdGsubm90aWZpY2F0aW9uLk5vdGlmaWNhdGlvbigKICAgICAgICAgICAgIlRvZG9zIiwKICAgICAgICAgICAgXygicHJlZmVyZW5jZXMuc3VjY2Vzc19tb2RpZmllZCIpLAogICAgICAgICAgICBib290c3R5bGU9ImluZm8iLAogICAgICAgICAgICBkdXJhdGlvbj0xMDAwMCwKICAgICAgICApLnNob3coKQoKCkB0YWt0ay5jb21wb25lbnQuY29tcG9uZW50CmRlZiBMYXlvdXQoc2VsZik6CiAgICByIiIiCiAgICBcZnJhbWUKICAgICAgICBcZnJhbWUgcGFkZGluZz01IHBvczpwYWNrCiAgICAgICAgICAgIFxidXR0b24gY29tbWFuZD17YmFja30gICAgICAgIGltYWdlPTxpbWc6QGJhY2t3YXJke3dpZHRoOiAyMH0+IFwKICAgICAgICAgICAgICAgIHBvczpncmlkPTAsMCBwb3M6c3RpY2t5PSd3JyBib290c3R5bGU9J2Rhcmsgb3V0bGluZScKICAgICAgICAgICAgXGJ1dHRvbiBjb21tYW5kPXtndF91c2Vyc31cCiAgICAgICAgICAgICAgICBpbWFnZT08aW1nOkB1c2Vycy1iZXR3ZWVuLWxpbmVze2hlaWdodDogMjB9PiBwb3M6Z3JpZD0xLDBcCiAgICAgICAgICAgICAgICBwb3M6c3RpY2t5PSd3JyBib290c3R5bGU9J2Rhcmsgb3V0bGluZScKICAgICAgICAgICAgXGJ1dHRvbiBjb21tYW5kPXtndF90b2Rvc31cCiAgICAgICAgICAgICAgICBpbWFnZT08aW1nOkBjaGVjay1kb3VibGV7aGVpZ2h0OiAyMH0+IHBvczpncmlkPTIsMFwKICAgICAgICAgICAgICAgIHBvczpzdGlja3k9J3cnIGJvb3RzdHlsZT0nZGFyayBvdXRsaW5lJwogICAgICAgICAgICBcbGFiZWxcCiAgICAgICAgICAgICAgICB0ZXh0PXtmJ2xvZ2dlZCBpbiBhczoge1VzZXIuY3VycmVudCgpLm5hbWV9JyBpZiBVc2VyLmN1cnJlbnQoKSBlbHNlICJub3QgbG9nZ2VkIGluISJ9XAogICAgICAgICAgICAgICAgcG9zOmdyaWQ9MywwCiAgICAgICAgICAgIFxidXR0b24gY29tbWFuZD17Zm9yd2FyZH0gaW1hZ2U9PGltZzpAZm9yd2FyZHt3aWR0aDogMjB9PlwKICAgICAgICAgICAgICAgIHBvczpncmlkPTUsMCBwb3M6c3RpY2t5PSdlJyBib290c3R5bGU9J2Rhcmsgb3V0bGluZScKICAgICAgICBcZnJhbWU6b3V0bGV0IHBvczpwYWNrCiAgICAiIiIKICAgIGZyb20gLmFkbWluIGltcG9ydCBVc2VyCgogICAgdXNlciA9IE5vbmUKCiAgICBkZWYgYmFjaygpOgogICAgICAgIHRha3RrLmFwcGxpY2F0aW9uLmJhY2soKQoKICAgIGRlZiBmb3J3YXJkKCk6CiAgICAgICAgdGFrdGsuYXBwbGljYXRpb24uZm9yd2FyZCgpCgogICAgZGVmIGd0X3VzZXJzKCk6CiAgICAgICAgdGFrdGsuYXBwbGljYXRpb24oInVzZXJzIikKCiAgICBkZWYgZ3RfdG9kb3MoKToKICAgICAgICB0YWt0ay5hcHBsaWNhdGlvbigidG9kb3MiKQoKICAgIHJldHVybiBsb2NhbHMoKSB8IGdsb2JhbHMoKQo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoHAAAAAAAA5AcAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "src/taktk/component.py",
			"settings":
			{
				"buffer_size": 16980,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					564,
					1,
					"left_delete",
					null,
					"AQAAAO4uAAAAAAAA7i4AAAAAAAAdAAAAICAgICAgICAgICAgcHJpbnQobmFtZXNwYWNlKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuLgAAAAAAAAsvAAAAAAAAAAAAAAAA8L8"
				],
				[
					567,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuLgAAAAAAAO4uAAAAAAAAAAAAAAAA8L8"
				],
				[
					578,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFoqAAAAAAAAWyoAAAAAAAAAAAAAWyoAAAAAAABrKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaKgAAAAAAAFoqAAAAAAAAAAAAAAAA8L8"
				],
				[
					579,
					3,
					"left_delete",
					null,
					"AwAAAGcqAAAAAAAAZyoAAAAAAAAEAAAAICAgIGMqAAAAAAAAYyoAAAAAAAAEAAAAICAgIF8qAAAAAAAAXyoAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrKgAAAAAAAGsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					580,
					1,
					"insert",
					{
						"characters": "\ndef"
					},
					"BgAAAF8qAAAAAAAAYCoAAAAAAAAAAAAAYCoAAAAAAABkKgAAAAAAAAAAAABbKgAAAAAAAFsqAAAAAAAABAAAACAgICBgKgAAAAAAAGEqAAAAAAAAAAAAAGEqAAAAAAAAYioAAAAAAAAAAAAAYioAAAAAAABjKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfKgAAAAAAAF8qAAAAAAAAAAAAAAAA8L8"
				],
				[
					581,
					1,
					"insert",
					{
						"characters": " __del__"
					},
					"CAAAAGMqAAAAAAAAZCoAAAAAAAAAAAAAZCoAAAAAAABlKgAAAAAAAAAAAABlKgAAAAAAAGYqAAAAAAAAAAAAAGYqAAAAAAAAZyoAAAAAAAAAAAAAZyoAAAAAAABoKgAAAAAAAAAAAABoKgAAAAAAAGkqAAAAAAAAAAAAAGkqAAAAAAAAaioAAAAAAAAAAAAAaioAAAAAAABrKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABjKgAAAAAAAGMqAAAAAAAAAAAAAAAA8L8"
				],
				[
					582,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGsqAAAAAAAAbSoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrKgAAAAAAAGsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					583,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAAGwqAAAAAAAAbSoAAAAAAAAAAAAAbSoAAAAAAABuKgAAAAAAAAAAAABuKgAAAAAAAG8qAAAAAAAAAAAAAG8qAAAAAAAAcCoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsKgAAAAAAAGwqAAAAAAAAAAAAAAAA8L8"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHEqAAAAAAAAcioAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxKgAAAAAAAHEqAAAAAAAAAAAAAAAA8L8"
				],
				[
					586,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAHIqAAAAAAAAcyoAAAAAAAAAAAAAcyoAAAAAAAB3KgAAAAAAAAAAAAB3KgAAAAAAAHsqAAAAAAAAAAAAAHsqAAAAAAAAfCoAAAAAAAAAAAAAfCoAAAAAAAB9KgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByKgAAAAAAAHIqAAAAAAAAAAAAAAAA8L8"
				],
				[
					587,
					2,
					"left_delete",
					null,
					"AgAAAHwqAAAAAAAAfCoAAAAAAAABAAAAZnsqAAAAAAAAeyoAAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9KgAAAAAAAH0qAAAAAAAAAAAAAAAA8L8"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAHsqAAAAAAAAfCoAAAAAAAAAAAAAfCoAAAAAAAB9KgAAAAAAAAAAAAB9KgAAAAAAAH4qAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB7KgAAAAAAAHsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					589,
					1,
					"insert",
					{
						"characters": " child"
					},
					"BgAAAH4qAAAAAAAAfyoAAAAAAAAAAAAAfyoAAAAAAACAKgAAAAAAAAAAAACAKgAAAAAAAIEqAAAAAAAAAAAAAIEqAAAAAAAAgioAAAAAAAAAAAAAgioAAAAAAACDKgAAAAAAAAAAAACDKgAAAAAAAIQqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+KgAAAAAAAH4qAAAAAAAAAAAAAAAA8L8"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAIQqAAAAAAAAhSoAAAAAAAAAAAAAhSoAAAAAAACGKgAAAAAAAAAAAACGKgAAAAAAAIcqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEKgAAAAAAAIQqAAAAAAAAAAAAAAAA8L8"
				],
				[
					591,
					1,
					"insert",
					{
						"characters": " self.chi"
					},
					"CQAAAIcqAAAAAAAAiCoAAAAAAAAAAAAAiCoAAAAAAACJKgAAAAAAAAAAAACJKgAAAAAAAIoqAAAAAAAAAAAAAIoqAAAAAAAAiyoAAAAAAAAAAAAAiyoAAAAAAACMKgAAAAAAAAAAAACMKgAAAAAAAI0qAAAAAAAAAAAAAI0qAAAAAAAAjioAAAAAAAAAAAAAjioAAAAAAACPKgAAAAAAAAAAAACPKgAAAAAAAJAqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHKgAAAAAAAIcqAAAAAAAAAAAAAAAA8L8"
				],
				[
					592,
					1,
					"insert",
					{
						"characters": "ldren:"
					},
					"BgAAAJAqAAAAAAAAkSoAAAAAAAAAAAAAkSoAAAAAAACSKgAAAAAAAAAAAACSKgAAAAAAAJMqAAAAAAAAAAAAAJMqAAAAAAAAlCoAAAAAAAAAAAAAlCoAAAAAAACVKgAAAAAAAAAAAACVKgAAAAAAAJYqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQKgAAAAAAAJAqAAAAAAAAAAAAAAAA8L8"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": "[:]"
					},
					"AwAAAJUqAAAAAAAAlioAAAAAAAAAAAAAlioAAAAAAACXKgAAAAAAAAAAAACXKgAAAAAAAJgqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVKgAAAAAAAJUqAAAAAAAAAAAAAAAA8L8"
				],
				[
					598,
					1,
					"insert",
					{
						"characters": "\ndel"
					},
					"BgAAAJkqAAAAAAAAmioAAAAAAAAAAAAAmioAAAAAAACiKgAAAAAAAAAAAACiKgAAAAAAAKYqAAAAAAAAAAAAAKYqAAAAAAAApyoAAAAAAAAAAAAApyoAAAAAAACoKgAAAAAAAAAAAACoKgAAAAAAAKkqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZKgAAAAAAAJkqAAAAAAAAAAAAAAAA8L8"
				],
				[
					599,
					1,
					"insert",
					{
						"characters": " child"
					},
					"BgAAAKkqAAAAAAAAqioAAAAAAAAAAAAAqioAAAAAAACrKgAAAAAAAAAAAACrKgAAAAAAAKwqAAAAAAAAAAAAAKwqAAAAAAAArSoAAAAAAAAAAAAArSoAAAAAAACuKgAAAAAAAAAAAACuKgAAAAAAAK8qAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpKgAAAAAAAKkqAAAAAAAAAAAAAAAA8L8"
				],
				[
					602,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvKgAAAAAAAK8qAAAAAAAAAAAAAAAA8L8"
				],
				[
					603,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK8qAAAAAAAAsCoAAAAAAAAAAAAAsCoAAAAAAAC8KgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvKgAAAAAAAK8qAAAAAAAAAAAAAAAA8L8"
				],
				[
					604,
					1,
					"left_delete",
					null,
					"AQAAALgqAAAAAAAAuCoAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8KgAAAAAAALwqAAAAAAAAAAAAAAAA8L8"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": "del"
					},
					"AwAAALgqAAAAAAAAuSoAAAAAAAAAAAAAuSoAAAAAAAC6KgAAAAAAAAAAAAC6KgAAAAAAALsqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4KgAAAAAAALgqAAAAAAAAAAAAAAAA8L8"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": " self.co"
					},
					"CAAAALsqAAAAAAAAvCoAAAAAAAAAAAAAvCoAAAAAAAC9KgAAAAAAAAAAAAC9KgAAAAAAAL4qAAAAAAAAAAAAAL4qAAAAAAAAvyoAAAAAAAAAAAAAvyoAAAAAAADAKgAAAAAAAAAAAADAKgAAAAAAAMEqAAAAAAAAAAAAAMEqAAAAAAAAwioAAAAAAAAAAAAAwioAAAAAAADDKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7KgAAAAAAALsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"AgAAAMMqAAAAAAAAxCoAAAAAAAAAAAAAxCoAAAAAAADFKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDKgAAAAAAAMMqAAAAAAAAAAAAAAAA8L8"
				],
				[
					608,
					1,
					"insert_dimensions",
					null,
					"AgAAAMEqAAAAAAAAwSoAAAAAAAAEAAAAY29udMEqAAAAAAAAyioAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADFKgAAAAAAAMUqAAAAAAAAAAAAAAAA8L8"
				],
				[
					609,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMoqAAAAAAAAzCoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKKgAAAAAAAMoqAAAAAAAAAAAAAAAA8L8"
				],
				[
					612,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADLKgAAAAAAAMsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					615,
					4,
					"left_delete",
					null,
					"BAAAALsqAAAAAAAAuyoAAAAAAAABAAAAILoqAAAAAAAAuioAAAAAAAABAAAAbLkqAAAAAAAAuSoAAAAAAAABAAAAZbgqAAAAAAAAuCoAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8KgAAAAAAALwqAAAAAAAAAAAAAAAA8L8"
				],
				[
					617,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAMYqAAAAAAAAxioAAAAAAAABAAAAKMYqAAAAAAAAxioAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHKgAAAAAAAMcqAAAAAAAAAAAAAAAA8L8"
				],
				[
					618,
					1,
					"insert",
					{
						"characters": ".destr"
					},
					"BgAAAMYqAAAAAAAAxyoAAAAAAAAAAAAAxyoAAAAAAADIKgAAAAAAAAAAAADIKgAAAAAAAMkqAAAAAAAAAAAAAMkqAAAAAAAAyioAAAAAAAAAAAAAyioAAAAAAADLKgAAAAAAAAAAAADLKgAAAAAAAMwqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGKgAAAAAAAMYqAAAAAAAAAAAAAAAA8L8"
				],
				[
					619,
					1,
					"insert_dimensions",
					null,
					"AgAAAMcqAAAAAAAAxyoAAAAAAAAFAAAAZGVzdHLHKgAAAAAAANAqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMKgAAAAAAAMwqAAAAAAAAAAAAAAAA8L8"
				],
				[
					622,
					1,
					"insert",
					{
						"characters": "\ndel"
					},
					"BQAAANAqAAAAAAAA0SoAAAAAAAAAAAAA0SoAAAAAAADZKgAAAAAAAAAAAADZKgAAAAAAANoqAAAAAAAAAAAAANoqAAAAAAAA2yoAAAAAAAAAAAAA2yoAAAAAAADcKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQKgAAAAAAANAqAAAAAAAAAAAAAAAA8L8"
				],
				[
					623,
					1,
					"insert",
					{
						"characters": " self.con"
					},
					"CQAAANwqAAAAAAAA3SoAAAAAAAAAAAAA3SoAAAAAAADeKgAAAAAAAAAAAADeKgAAAAAAAN8qAAAAAAAAAAAAAN8qAAAAAAAA4CoAAAAAAAAAAAAA4CoAAAAAAADhKgAAAAAAAAAAAADhKgAAAAAAAOIqAAAAAAAAAAAAAOIqAAAAAAAA4yoAAAAAAAAAAAAA4yoAAAAAAADkKgAAAAAAAAAAAADkKgAAAAAAAOUqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcKgAAAAAAANwqAAAAAAAAAAAAAAAA8L8"
				],
				[
					624,
					1,
					"insert_dimensions",
					null,
					"AgAAAOIqAAAAAAAA4ioAAAAAAAADAAAAY29u4ioAAAAAAADrKgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlKgAAAAAAAOUqAAAAAAAAAAAAAAAA8L8"
				],
				[
					627,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrKgAAAAAAAOsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					643,
					1,
					"insert",
					{
						"characters": "\nSub"
					},
					"BQAAAOsqAAAAAAAA7CoAAAAAAAAAAAAA7CoAAAAAAAD0KgAAAAAAAAAAAAD0KgAAAAAAAPUqAAAAAAAAAAAAAPUqAAAAAAAA9ioAAAAAAAAAAAAA9ioAAAAAAAD3KgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADrKgAAAAAAAOsqAAAAAAAAAAAAAAAA8L8"
				],
				[
					644,
					1,
					"insert_dimensions",
					null,
					"AgAAAPQqAAAAAAAA9CoAAAAAAAADAAAAU3Vi9CoAAAAAAAD/KgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3KgAAAAAAAPcqAAAAAAAAAAAAAAAA8L8"
				],
				[
					647,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPQqAAAAAAAA9SoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0KgAAAAAAAPQqAAAAAAAAAAAAAAAA8L8"
				],
				[
					649,
					1,
					"insert",
					{
						"characters": "wri"
					},
					"AwAAAPQqAAAAAAAA9SoAAAAAAAAAAAAA9SoAAAAAAAD2KgAAAAAAAAAAAAD2KgAAAAAAAPcqAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0KgAAAAAAAPQqAAAAAAAAAAAAAAAA8L8"
				],
				[
					650,
					1,
					"insert_dimensions",
					null,
					"AgAAAPQqAAAAAAAA9CoAAAAAAAADAAAAd3Jp9CoAAAAAAAD+KgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3KgAAAAAAAPcqAAAAAAAAAAAAAAAA8L8"
				],
				[
					652,
					1,
					"left_delete",
					null,
					"AQAAAP4qAAAAAAAA/ioAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/KgAAAAAAAP8qAAAAAAAAAAAAAAAA8L8"
				],
				[
					654,
					1,
					"insert",
					{
						"characters": "__del__"
					},
					"BwAAAAkrAAAAAAAACisAAAAAAAAAAAAACisAAAAAAAALKwAAAAAAAAAAAAALKwAAAAAAAAwrAAAAAAAAAAAAAAwrAAAAAAAADSsAAAAAAAAAAAAADSsAAAAAAAAOKwAAAAAAAAAAAAAOKwAAAAAAAA8rAAAAAAAAAAAAAA8rAAAAAAAAECsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJKwAAAAAAAAkrAAAAAAAAAAAAAAAA8L8"
				],
				[
					655,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABArAAAAAAAAEisAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQKwAAAAAAABArAAAAAAAAAAAAAAAA8L8"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": "self"
					},
					"BAAAABErAAAAAAAAEisAAAAAAAAAAAAAEisAAAAAAAATKwAAAAAAAAAAAAATKwAAAAAAABQrAAAAAAAAAAAAABQrAAAAAAAAFSsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARKwAAAAAAABErAAAAAAAAAAAAAAAA8L8"
				],
				[
					659,
					1,
					"black",
					{
						"use_selection": false
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVKwAAAAAAABUrAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "Taktk todoapp",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk Docs",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk Docs",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/py310.sublime-build",
					""
				],
				[
					"Packages/User/py312.sublime-build",
					""
				],
				[
					"Packages/User/py313.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk Docs",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk admin",
					""
				],
				[
					"Taktk notify",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk admin",
					""
				],
				[
					"Taktk simple",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk simple",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk admin",
					""
				],
				[
					"Taktk simple test",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/User/black.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk notify",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Black taktk",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/py310.sublime-build",
					""
				],
				[
					"Packages/User/py312.sublime-build",
					""
				],
				[
					"Packages/User/py313.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Black taktk",
					""
				],
				[
					"Taktk Docs",
					""
				],
				[
					"Taktk todoapp",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk todoapp",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/User/black.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Sbook",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Sbook",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Sbook",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/sass.sublime-build",
					""
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk Docs",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					""
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"All Syntaxes"
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"Performance"
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"Regex Compatibility"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Default Style)"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		],
		[
			[
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk Docs",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Default Style)"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/py310.sublime-build",
					""
				],
				[
					"Packages/User/py312.sublime-build",
					""
				],
				[
					"Packages/User/py313.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk Docs",
				""
			]
		],
		[
			[
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"Taktk Docs",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/py310.sublime-build",
					""
				],
				[
					"Packages/User/py312.sublime-build",
					""
				],
				[
					"Packages/User/py313.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		],
		[
			[
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Default Style)"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"isort taktk",
				""
			]
		],
		[
			[
				[
					"Black taktk",
					""
				],
				[
					"Taktk",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		],
		[
			[
				[
					"Black taktk",
					""
				],
				[
					"Taktk Docs",
					""
				],
				[
					"Taktk todoapp",
					""
				],
				[
					"isort taktk",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Default Style)"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk todoapp",
				""
			]
		],
		[
			[
				[
					"Packages/Default/Syntax Tests.sublime-build",
					""
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"All Syntaxes"
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"Performance"
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"Regex Compatibility"
				],
				[
					"Packages/User/Django.sublime-build",
					""
				]
			],
			[
				"Packages/User/Django.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Default/Syntax Tests.sublime-build",
					""
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"All Syntaxes"
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"Performance"
				],
				[
					"Packages/Default/Syntax Tests.sublime-build",
					"Regex Compatibility"
				],
				[
					"Packages/User/Django.sublime-build",
					""
				],
				[
					"Packages/User/Django.sublime-build",
					"pylint"
				]
			],
			[
				"Packages/User/Django.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Golang Build/Go.sublime-build",
					""
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Run"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Test"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Install"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Cross-Compile (Interactive)"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Clean"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Golang Build/Go.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					""
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Run"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Test"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Install"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Cross-Compile (Interactive)"
				],
				[
					"Packages/Golang Build/Go.sublime-build",
					"Clean"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/Golang Build/Go.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/NSIS/NSIS.sublime-build",
					""
				],
				[
					"Packages/NSIS/NSIS.sublime-build",
					"strict"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/NSIS/NSIS.sublime-build",
				"strict"
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/NSIS/NSIS.sublime-build",
					""
				],
				[
					"Packages/NSIS/NSIS.sublime-build",
					"strict"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/NSIS/NSIS.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/shellsy/shellsy.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/shellsy/shellsy.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/User/black.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Default Style)"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/User/black.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/Django.sublime-build",
					""
				],
				[
					"Packages/User/Django.sublime-build",
					"pylint"
				]
			],
			[
				"Packages/User/Django.sublime-build",
				""
			]
		],
		[
			[
				[
					"Sbook",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Sbook",
				""
			]
		],
		[
			[
				[
					"Sbook",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				]
			],
			[
				"Packages/subliminal/Django.sublime-build",
				""
			]
		],
		[
			[
				[
					"Sbook",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sass.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Packages/User/sass.sublime-build",
				""
			]
		],
		[
			[
				[
					"Sbook",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/sass.sublime-build",
					""
				]
			],
			[
				"Packages/User/sass.sublime-build",
				""
			]
		],
		[
			[
				[
					"Taktk",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Default Style)"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		],
		[
			[
				[
					"Taktk",
					""
				],
				[
					"Taktk admin",
					""
				],
				[
					"Taktk notify",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Default Style)"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk admin",
				""
			]
		],
		[
			[
				[
					"Taktk",
					""
				],
				[
					"Taktk admin",
					""
				],
				[
					"Taktk simple test",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					""
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"JSON"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"Property List"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Block Style)"
				],
				[
					"Packages/PackageDev/Package/Convert to ....sublime-build",
					"YAML (Default Style)"
				],
				[
					"Packages/subliminal/Django.sublime-build",
					""
				],
				[
					"Packages/subliminal/Django.sublime-build",
					"pylint"
				],
				[
					"Packages/User/black.sublime-build",
					""
				],
				[
					"Packages/User/go.sublime-build",
					""
				],
				[
					"Packages/User/sphinx.sublime-build",
					""
				]
			],
			[
				"Taktk",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"macc",
				"Anaconda: McCabe complexity check"
			],
			[
				"myp",
				"Anaconda: McCabe complexity check"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"anaconda",
				"Anaconda: McCabe complexity check"
			],
			[
				"black",
				"python-black: Format the selected code or the code of the entire file"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"bl",
				"python-black: Format the selected code or the code of the entire file"
			],
			[
				"enab",
				"Package Control: Enable Package"
			],
			[
				"helium",
				"Helium: Settings"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"notifi",
				"Open Github Notifications"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"enable",
				"Package Control: Enable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"re",
				"Package Control: Remove Package"
			],
			[
				"waka",
				"WakaTime: Open Dashboard"
			],
			[
				"camel",
				"Convert Case: lowerCamelCase"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"lsp py",
				"Preferences: LSP-pylsp Settings"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"anac",
				"Anaconda: Goto Python object"
			],
			[
				"lab",
				"Preferences: LSP-basedpyright Settings"
			],
			[
				"lsp",
				"Preferences: LSP Settings"
			],
			[
				"UI",
				"UI: Select Theme"
			],
			[
				"cAMEL",
				"Convert Case: UpperCamelCase"
			],
			[
				"ui",
				"UI: Select Theme"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			],
			[
				"reformat",
				"Preferences: Terminus Command Palette"
			],
			[
				"Package Control: dis",
				"Package Control: Disable Package"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"Package Control: e",
				"Package Control: Enable Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: add",
				"Package Control: Add Repository"
			],
			[
				"Package Control: I",
				"Package Control: Install Package"
			],
			[
				"Package Control: d",
				"Package Control: Disable Package"
			],
			[
				"Package Control: D",
				"Package Control: Disable Package"
			],
			[
				"open",
				"Sublime Files: Open Navigator"
			],
			[
				"ter",
				"Terminal: Open"
			],
			[
				"Package Control: Add",
				"Package Control: Add Repository"
			],
			[
				"Package Control: l",
				"Package Control: List Packages"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 164.0,
		"history":
		[
			"import socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 52595))",
			"\nd",
			"\nimport socket; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((\"localhost\", 49491))"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/media/ken-morel/data/taktk",
		"/media/ken-morel/data/taktk/examples",
		"/media/ken-morel/data/taktk/examples/todoapp",
		"/media/ken-morel/data/taktk/examples/todoapp/todoapp",
		"/media/ken-morel/data/taktk/examples/todoapp/todoapp/dictionaries",
		"/media/ken-morel/data/taktk/examples/todoapp/todoapp/pages",
		"/media/ken-morel/data/taktk/src",
		"/media/ken-morel/data/taktk/src/taktk"
	],
	"file_history":
	[
		"/media/ken-morel/data/taktk/examples/todoapp/main.py",
		"/media/ken-morel/data/taktk/taktk.sublime-project",
		"/media/ken-morel/data/taktk/examples/todoapp/todoapp/pages/sign.py",
		"/media/ken-morel/data/taktk/examples/todoapp/todoapp/taktk.py",
		"/media/ken-morel/data/taktk/examples/todoapp/todoapp/dictionaries/English.yml",
		"/media/ken-morel/data/taktk/glance.yml",
		"/media/ken-morel/data/taktk/.gitignore",
		"/media/ken-morel/data/taktk/src/taktk/template.py",
		"/media/ken-morel/data/taktk/examples/todoapp/todoapp/pages/todos.py",
		"/media/ken-morel/data/taktk/src/taktk/menu.py",
		"/media/ken-morel/data/taktk/src/taktk/media.py",
		"/media/ken-morel/data/taktk/src/taktk/component.py",
		"/media/ken-morel/data/taktk/src/taktk/page.py",
		"/home/ken-morel/.config/sublime-text/Packages/subliminal/subliminal-Python.sublime-syntax",
		"/media/ken-morel/data/taktk/src/taktk/components.py",
		"/media/ken-morel/data/taktk/examples/todoapp/todoapp/pages/__init__.py",
		"/media/ken-morel/data/taktk/src/taktk/application.py",
		"/media/ken-morel/data/taktk/lib/python3.12/site-packages/pyoload/__init__.py",
		"/home/ken-morel/.config/sublime-text/Packages/User/githubNotif.sublime-settings",
		"/home/ken-morel/.config/sublime-text/Packages/User/github_issue.sublime-settings",
		"/media/ken-morel/data/taktk/pyproject.toml",
		"/media/ken-morel/data/taktk/src/taktk/dictionary.py",
		"/media/ken-morel/data/taktk/examples/locale/main.py",
		"/media/ken-morel/data/taktk/examples/locale/<string>",
		"/media/ken-morel/data/taktk/src/taktk/writeable.py",
		"/media/ken-morel/data/taktk/examples/login_page.py",
		"/media/ken-morel/data/taktk/examples/acrylic.py",
		"/media/ken-morel/data/taktk/examples/notify.py",
		"/media/ken-morel/data/taktk/examples/simple.py",
		"/media/ken-morel/data/taktk/src/taktk/<string>",
		"/usr/lib/python3.10/tkinter/__init__.py",
		"/media/ken-morel/data/taktk/lib/python3.10/site-packages/ttkbootstrap/style.py",
		"/home/ken-morel/.config/sublime-text/Packages/User/Anaconda.sublime-settings",
		"/home/ken-morel/.config/sublime-text/Packages/Anaconda/Anaconda.sublime-settings",
		"/media/ken-morel/6A84527C84524B29/Users/engon/AppData/Roaming/Sublime Text/Packages/User/Default (Windows).sublime-keymap",
		"/D/taktk/src/taktk/constants.py",
		"/C/Users/engon/.ipython/profile_default/ipython_config.py",
		"/C/.py/py_startup.py",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/User/Anaconda.sublime-settings",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/Anaconda/Anaconda.sublime-settings",
		"/D/taktk/src/taktk/sdown.py",
		"/D/taktk/src/taktk/component/builtin/__init__.py",
		"/D/taktk/pyproject.toml",
		"/D/taktk/src/taktk/component/builtin/sdown.py",
		"/D/taktk/src/taktk/component.py",
		"/D/taktk/examples/todoapp/todoapp/taktk.py",
		"/D/taktk/examples/noseman.obj",
		"/D/taktk/examples/load_obj.py",
		"/D/tkinter_gl/test/square.py",
		"/D/shellsy/src/shellsy/lexer.py",
		"/D/taktk/docs/whatsnew.rst",
		"/D/taktk/docs/index.rst",
		"/D/taktk/examples/login_page.py",
		"/D/taktk/docs/quickstart.rst",
		"/D/taktk/src/taktk/lexer.py",
		"/C/Users/engon/AppData/Local/Packages/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe/LocalState/settings.json",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/subliminal/subliminal-Python.sublime-syntax",
		"/D/taktk/docs/conf.py",
		"/D/taktk/examples/maps.py",
		"/D/taktk/examples/tiny_3d.py",
		"/D/taktk/docs/requirements.txt",
		"/D/taktk/docs/installation.rst",
		"/D/taktk/docs/_static/github.svg",
		"/D/taktk/docs/todo.md",
		"/D/taktk/docs/tutorials/index.rst",
		"/D/taktk/docs/docutils.conf",
		"/D/taktk/.pre-commit-config.yaml",
		"/D/taktk/.readthedocs.yaml",
		"/D/taktk/requirements.txt",
		"/D/taktk/taktk.sublime-project",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/User/SublimeTextTrans.sublime-settings",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/Transparency/SublimeTextTrans.sublime-settings",
		"/D/utils/rmbg.py",
		"/D/taktk/README.md",
		"/D/taktk/examples/todoapp/main.py",
		"/D/taktk/examples/todo.py",
		"/D/taktk/src/taktk/component/__init__.py",
		"/D/taktk/src/taktk/notification.py",
		"/D/taktk/src/taktk/dictionary.py",
		"/D/taktk/src/taktk/writeable.py",
		"/D/taktk/src/taktk/template.py",
		"/C/Users/engon/OneDrive/Documents/PowerShell/Microsoft.PowerShell_profile.ps1",
		"/D/taktk/src/taktk/component/builtin/ctk.py",
		"/D/TBomb/bomber.py",
		"/D/taktk/examples/todoapp/todoapp/admin.py",
		"/D/taktk/examples/notify.py",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/User/Sublime Text Settings.sublime-settings",
		"/D/taktk/src/taktk/component/parser.py",
		"/D/nanoGPT/out-shakespeare-char/ckpt.pt",
		"/D/taktk/src/taktk/application.py",
		"/D/taktk/src/taktk/__init__.py",
		"/D/taktk/examples/todoapp/todoapp/dictionaries/English.yml",
		"/D/taktk/examples/todoapp/todoapp/dictionaries/French.yml",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/Github Notifications/githubNotif.sublime-settings",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/User/githubNotif.sublime-settings",
		"/D/taktk/examples/todoapp/todoapp/pages/sign.py",
		"/D/taktk/.gitignore",
		"/D/taktk/examples/todoapp/todoapp/pages/__init__.py",
		"/D/taktk/examples/acrylic.py",
		"/C/Users/engon/AppData/Roaming/Sublime Text/Packages/User/py313.sublime-build",
		"/C/taktk/examples/todoapp/todoapp/__init__.py",
		"/C/taktk/examples/todoapp/main.py",
		"/C/taktk/examples/todoapp/todoapp/pages/users.py",
		"/C/taktk/examples/todoapp/todoapp/pages/todos.py",
		"/C/taktk/examples/todoapp/todoapp/pages/_user.py",
		"/C/taktk/examples/todoapp/todoapp/pages/__init__.py",
		"/C/taktk/src/taktk/page.py",
		"/C/taktk/src/taktk/application.py",
		"/C/taktk/examples/todoapp/todoapp/pages/sign.py",
		"/C/taktk/src/taktk/component/__init__.py",
		"/C/taktk/examples/todoapp/todoapp/store.json",
		"/C/taktk/src/taktk/component/instructions.py",
		"/C/taktk/src/taktk/store.py",
		"/C/taktk/src/taktk/component/builtin/__init__.py",
		"/C/taktk/src/taktk/dictionary.py",
		"/C/taktk/src/taktk/__init__.py",
		"/C/taktk/src/taktk/component/builtin/taktk.py",
		"/C/taktk/src/taktk/media.py",
		"/C/taktk/src/taktk/application_server.py",
		"/C/taktk/taktk.sublime-project",
		"/C/taktk/src/taktk/__main__.py",
		"/C/Program Files/Python313/Lib/http/server.py",
		"/C/taktk/examples/todoapp/todoapp/media/img/rmbg.py",
		"/C/taktk/examples/video.py",
		"/C/taktk/src/taktk/notification.py",
		"/C/gh_models/main.py",
		"/C/gh_models/log.md",
		"/C/Users/engon/OneDrive/Documents/Rainmeter/Skins/GMailNotify/GMailNotify.ini"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 190.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"self.store",
			"app",
			"store_",
			"Application",
			"application",
			"app",
			"destroy",
			"\n        ",
			"grid",
			"self",
			"widgets",
			"widget",
			"instr",
			"condition",
			"object",
			"condition",
			"alias",
			"aliasses",
			"alias",
			"state",
			"enum",
			"special",
			"self.store",
			"print\\(e\\)",
			"self.redirect",
			"self",
			"def",
			"kwargs",
			"store",
			"self",
			"ctk.",
			"self",
			"eval",
			"self",
			"pass",
			"parent",
			"item",
			"instructions",
			"SPECIAL",
			"name",
			"state",
			"begin",
			"5",
			"_store",
			"image",
			"Resoirce",
			"Media",
			"Writeable",
			"tuple",
			"created",
			"self",
			"taktk-media-spec",
			"d",
			"locale",
			"Subscriber",
			"NamespaceWriteable",
			"simple",
			"english",
			"self",
			"locale",
			"self",
			"namespace",
			"locale",
			"Component",
			"grid",
			"french",
			"english",
			"Writeable",
			"Subscribeable",
			"eval_structure",
			"ttkMenu",
			"ttkbootstrap",
			"window",
			"show",
			"dictionary",
			"Subscribeable",
			"Dictionary",
			"None",
			"add",
			"subscribers",
			"self",
			"False",
			"resolve",
			"print",
			"self",
			"val",
			"vars(self.attrs).items()",
			"set",
			"add",
			"set",
			"sub",
			"value",
			"dir",
			"functools",
			"key",
			"args",
			"namespace",
			"attrs",
			"params",
			"Attrs",
			"Iterable",
			"code",
			"false",
			"basic",
			"call",
			"subscriber",
			"Scripts",
			"True",
			"code",
			"constants",
			"tkinter",
			"get_media",
			"RAW",
			"State",
			"phantom",
			"false",
			"show",
			"hide",
			"Expression",
			"TkComponent",
			"_Component",
			"Writeable",
			"Image",
			"_Component",
			"TkComponent",
			"_Component",
			"Writeable",
			"Namespace"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"self.get_store()",
			" +",
			"",
			"store",
			"cls.from_dict(",
			"_Component"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/taktk/template.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19871,
						"regions":
						{
						},
						"selection":
						[
							[
								8943,
								8943
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ":",
									"selector": "text.html.markdown"
								},
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric, meta.interpolated.format.fstring"
								}
							],
							"syntax": "Packages/subliminal/subliminal-Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3510.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "examples/todoapp/todoapp/pages/__init__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1118,
						"regions":
						{
						},
						"selection":
						[
							[
								646,
								615
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ":",
									"selector": "text.html.markdown"
								},
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric, meta.interpolated.format.fstring"
								}
							],
							"syntax": "Packages/subliminal/subliminal-Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/taktk/application.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9736,
						"regions":
						{
						},
						"selection":
						[
							[
								7494,
								7494
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ":",
									"selector": "text.html.markdown"
								},
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric, meta.interpolated.format.fstring"
								}
							],
							"syntax": "Packages/subliminal/subliminal-Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 2626.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/taktk/page.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8815,
						"regions":
						{
						},
						"selection":
						[
							[
								1259,
								1259
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ":",
									"selector": "text.html.markdown"
								},
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric, meta.interpolated.format.fstring"
								}
							],
							"syntax": "Packages/subliminal/subliminal-Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 455.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "examples/todoapp/todoapp/taktk.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3812,
						"regions":
						{
						},
						"selection":
						[
							[
								2010,
								2020
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ":",
									"selector": "text.html.markdown"
								},
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric, meta.interpolated.format.fstring"
								}
							],
							"syntax": "Packages/subliminal/subliminal-Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 871.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/taktk/component.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16980,
						"regions":
						{
						},
						"selection":
						[
							[
								13971,
								13971
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ":",
									"selector": "text.html.markdown"
								},
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric, meta.interpolated.format.fstring"
								}
							],
							"syntax": "Packages/subliminal/subliminal-Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 3354.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 57.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 187.0
	},
	"output.Terminus 2":
	{
		"height": 134.0
	},
	"output.Terminus 3":
	{
		"height": 151.0
	},
	"output.Terminus 4":
	{
		"height": 146.0
	},
	"output.Terminus 5":
	{
		"height": 126.0
	},
	"output.Terminus 6":
	{
		"height": 220.0
	},
	"output.diff_views":
	{
		"height": 527.0
	},
	"output.exec":
	{
		"height": 188.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.golang_build":
	{
		"height": 126.0
	},
	"output.gotools_syntax_errors":
	{
		"height": 98.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.stino_build_panel":
	{
		"height": 0.0
	},
	"output.stino_panel":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "taktk.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"templa",
				"taktk/src/taktk/template.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\taktic\\desktop\\taktic-desktop.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 129.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"gt_next"
			]
		],
		"width": 598.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 266.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
